import{_ as l,c as o,e,a as s,b as a,d as p,r as i,o as r}from"./app-BSRiWrsC.js";const c={},d={href:"http://www.numpy.org/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/numpy/numpy",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.scipy.org/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/scipy/scipy",target:"_blank",rel:"noopener noreferrer"},k={href:"https://matplotlib.org/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/matplotlib/matplotlib",target:"_blank",rel:"noopener noreferrer"},h={href:"https://pandas.pydata.org/docs/user_guide/visualization.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/Mr_Cat123/article/details/100054757",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/luzi0206/article/details/125866610",target:"_blank",rel:"noopener noreferrer"};function y(x,n){const t=i("ExternalLinkIcon");return r(),o("div",null,[n[18]||(n[18]=e('<h2 id="matplotlib库的使用" tabindex="-1"><a class="header-anchor" href="#matplotlib库的使用"><span>Matplotlib库的使用</span></a></h2><p>[TOC]</p><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><p>Matplotlib 是 Python 的绘图库，它能让使用者很轻松地将数据图形化，可以用来绘制各种静态，动态，交互式的图表，并且提供多样化的输出格式。</p><h3 id="matplotlib应用" tabindex="-1"><a class="header-anchor" href="#matplotlib应用"><span>Matplotlib应用</span></a></h3><p>Matplotlib 通常与 NumPy 和 SciPy（Scientific Python）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。</p><p>SciPy 是一个开源的 Python 算法库和数学工具包。</p><p>SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。</p><h3 id="相关链接" tabindex="-1"><a class="header-anchor" href="#相关链接"><span>相关链接</span></a></h3>',9)),s("ul",null,[s("li",null,[n[1]||(n[1]=a("NumPy 官网： ")),s("a",d,[n[0]||(n[0]=a("http://www.numpy.org/")),p(t)])]),s("li",null,[n[3]||(n[3]=a("NumPy 源代码：")),s("a",u,[n[2]||(n[2]=a("https://github.com/numpy/numpy")),p(t)])]),s("li",null,[n[5]||(n[5]=a("SciPy 官网：")),s("a",m,[n[4]||(n[4]=a("https://www.scipy.org/")),p(t)])]),s("li",null,[n[7]||(n[7]=a("SciPy 源代码：")),s("a",g,[n[6]||(n[6]=a("https://github.com/scipy/scipy")),p(t)])]),s("li",null,[n[9]||(n[9]=a("Matplotlib 官网：")),s("a",k,[n[8]||(n[8]=a("https://matplotlib.org/")),p(t)])]),s("li",null,[n[11]||(n[11]=a("Matplotlib 源代码：")),s("a",b,[n[10]||(n[10]=a("https://github.com/matplotlib/matplotlib")),p(t)])]),s("li",null,[n[13]||(n[13]=a("pandas visualization官方文档：")),s("a",h,[n[12]||(n[12]=a("https://pandas.pydata.org/docs/user_guide/visualization.html")),p(t)])])]),n[19]||(n[19]=e(`<h3 id="pyplot" tabindex="-1"><a class="header-anchor" href="#pyplot"><span>Pyplot</span></a></h3><p>Pyplot 是 Matplotlib 的子库，提供了和 MATLAB 类似的绘图 API。</p><p>Pyplot 是常用的绘图模块，能很方便让用户绘制 2D 图表。</p><p>Pyplot 包含一系列绘图函数的相关函数，每个函数会对当前的图像进行一些修改，例如：给图像加上标记，生新的图像，在图像中产生新的绘图区域等等。</p><p>使用的时候，我们可以使用 import 导入 pyplot 库，并设置一个别名 <code>plt</code>：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span>  matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="常用函数" tabindex="-1"><a class="header-anchor" href="#常用函数"><span>常用函数</span></a></h4><ol><li><p>plt.show() # 显示图像窗口</p></li><li><p>plt.plot([x],y,[format],[x2],y2,[format]…) # 绘制二维图像</p><p><strong>颜色字符：</strong>&#39;b&#39; 蓝色，&#39;m&#39; 洋红色，&#39;g&#39; 绿色，&#39;y&#39; 黄色，&#39;r&#39; 红色，&#39;k&#39; 黑色，&#39;w&#39; 白色，&#39;c&#39; 青绿色，&#39;#008000&#39; RGB 颜色符串。多条曲线不指定颜色时，会自动选择不同颜色。</p><p><strong>线型参数：</strong>&#39;‐&#39; 实线，&#39;‐‐&#39; 破折线，&#39;‐.&#39; 点划线，&#39;:&#39; 虚线。</p><p><strong>标记字符：</strong>&#39;.&#39; 点标记，&#39;,&#39; 像素标记(极小点)，&#39;o&#39; 实心圈标记，&#39;v&#39; 倒三角标记，&#39;^&#39; 上三角标记，&#39;&gt;&#39; 右三角标记，&#39;&lt;&#39; 左三角标记...等等。</p><p>plt.title(“”) # 设置图片标题</p><p>plt.xlabel(”xlabel“) # 设置横轴标签</p><p>plt.ylabel(“ylabel”) # 设置纵轴标签</p><p>plt.legend() # 显示图例</p><p>plt.grid() # 显示网格</p><p>plt.xlim([start,end]) # 设置横轴范围</p><p>plt.ylim([start,end]) # 设置纵轴范围</p><p><strong>和matlab的函数差不多</strong></p></li><li><p>plt.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, *, edgecolors=None, plotnonfinite=False, data=None) # 绘制散点图</p><p><strong>x，y</strong>：长度相同的数组，也就是我们即将绘制散点图的数据点，输入数据。</p><p><strong>s</strong>：点的大小，默认 20，也可以是个数组，数组每个参数为对应点的大小。</p><p><strong>c</strong>：点的颜色，默认蓝色 &#39;b&#39;，也可以是个 RGB 或 RGBA 二维行数组。</p><p><strong>marker</strong>：点的样式，默认小圆圈 &#39;o&#39;。</p><p><strong>cmap</strong>：Colormap，默认 None，标量或者是一个 colormap 的名字，只有 c 是一个浮点数数组的时才使用。如果没有申明就是 image.cmap。</p><p><strong>norm</strong>：Normalize，默认 None，数据亮度在 0-1 之间，只有 c 是一个浮点数的数组的时才使用。</p><p><strong>vmin，vmax：</strong>：亮度设置，在 norm 参数存在时会忽略。</p><p><strong>alpha：</strong>：透明度设置，0-1 之间，默认 None，即不透明。</p><p><strong>linewidths：</strong>：标记点的长度。</p><p><strong>edgecolors：</strong>：颜色或颜色序列，默认为 &#39;face&#39;，可选值有 &#39;face&#39;, &#39;none&#39;, None。</p><p><strong>plotnonfinite：</strong>：布尔值，设置是否使用非限定的 c ( inf, -inf 或 nan) 绘制点。</p></li><li><p>plt.bar(x, height, width=0.8, bottom=None, *, align=&#39;center&#39;, data=None) # 绘制条形图</p><p><strong>x</strong>：浮点型数组，柱形图的 x 轴数据。</p><p><strong>height</strong>：浮点型数组，柱形图的高度。</p><p><strong>width</strong>：浮点型数组，柱形图的宽度。</p><p><strong>bottom</strong>：浮点型数组，底座的 y 坐标，默认 0。</p><p><strong>align</strong>：柱形图与 x 坐标的对齐方式，&#39;center&#39; 以 x 位置为中心，这是默认值。 &#39;edge&#39;：将柱形图的左边缘与 x 位置对齐。要对齐右边缘的条形，可以传递负数的宽度值及 align=&#39;edge&#39;。</p><p><strong>垂直方向的柱形图可以使用 barh() 方法来设置</strong></p></li><li><p>plt.pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=0, radius=1, counterclock=True, wedgeprops=None, textprops=None, center=0, 0, frame=False, rotatelabels=False, *, normalize=None, data=None) # 绘制饼图</p><p><strong>x</strong>：浮点型数组，表示每个扇形的面积。</p><p><strong>explode</strong>：数组，表示各个扇形之间的间隔，默认值为0。</p><p><strong>labels</strong>：列表，各个扇形的标签，默认值为 None。</p><p><strong>colors</strong>：数组，表示各个扇形的颜色，默认值为 None。</p><p><strong>autopct</strong>：设置饼图内各个扇形百分比显示格式，<strong>%d%%</strong> 整数百分比，<strong>%0.1f</strong> 一位小数， <strong>%0.1f%%</strong> 一位小数百分比， <strong>%0.2f%%</strong> 两位小数百分比。</p><p><strong>labeldistance</strong>：标签标记的绘制位置，相对于半径的比例，默认值为 1.1，如 <strong>&lt;1</strong>则绘制在饼图内侧。</p><p><strong>pctdistance：</strong>：类似于 labeldistance，指定 autopct 的位置刻度，默认值为 0.6。</p><p><strong>shadow：</strong>：布尔值 True 或 False，设置饼图的阴影，默认为 False，不设置阴影。</p><p><strong>radius：</strong>：设置饼图的半径，默认为 1。</p><p><strong>startangle：</strong>：起始绘制饼图的角度，默认为从 x 轴正方向逆时针画起，如设定 =90 则从 y 轴正方向画起。</p><p><strong>counterclock</strong>：布尔值，设置指针方向，默认为 True，即逆时针，False 为顺时针。</p><p><strong>wedgeprops</strong> ：字典类型，默认值 None。参数字典传递给 wedge 对象用来画一个饼图。例如：wedgeprops={&#39;linewidth&#39;:5} 设置 wedge 线宽为5。</p><p><strong>textprops</strong> ：字典类型，默认值为：None。传递给 text 对象的字典参数，用于设置标签（labels）和比例文字的格式。</p><p><strong>center</strong> ：浮点类型的列表，默认值：(0,0)。用于设置图标中心位置。</p><p><strong>frame</strong> ：布尔类型，默认值：False。如果是 True，绘制带有表的轴框架。</p><p><strong>rotatelabels</strong> ：布尔类型，默认为 False。如果为 True，旋转每个 label 到指定的角度。</p></li><li><p>plt.hist(array[,bins,rwidth,color]) # 绘制直方图</p><p>该函数统计array在bins的每个区间的元素个数，rwidth设置显示宽度</p></li><li><p>plt.figure(num=“”, figsise=(), dpi=, facecolor=, edgecolor=, clear=False) # 设置窗口参数</p><ul><li><code>num</code>:如果此参数没有提供，则一个新的figure对象将被创建，同时增加figure的计数数值，此数值被保存在figure对象的一个数字属性当中。如果有此参数，且存在对应id的figure对象，则激活对于id的figure对象。如果对应id的figur对象不存在，则创建它并返回它。如果num的值是字符串，则将窗口标题设置为此字符串。</li><li><code>figsize</code>:以英寸为单位的宽高，以元组的形式输入(1英寸等于2.54厘米)</li><li><code>dpi</code>:图形分辨率</li><li><code>facecolor</code>:背景色</li><li><code>edgecolor</code>:边框颜色</li><li><code>clear</code>:重建figure实例</li></ul><ol><li><p>plt.ion() # 进入交互模式</p><p>python可视化库matplotlib的显示模式默认为阻塞（block）模式。plt.show()之后，程序会暂停到那儿，并不会继续执行下去。如果需要继续执行程序，就要关闭图片。进入交互模式后，即使在脚本中遇到plt.show()，代码还是会继续执行。而且，在交互模式下，plt.plot(x)或plt.imshow(x)是直接出图像，不需要plt.show()。</p></li><li><p>plt.ioff() # 退出交互模式</p></li><li><p>plt.cla() # 清空当前子图</p></li><li><p>plt.clf() # 清空当前图形窗口，删除所有子图</p></li><li><p>plt.pause(internal) # 时间单位为s，运行GUI事件循环若干秒</p><p>如果当前有活动的图形，在<code>pause</code>函数运行前，图形将会更新并显示，在等待期间事件循环会一直运行，直到暂停时间<code>interval</code>秒后结束。 如果没有当前有活动的图形，将会调用<code>time.sleep</code>函数，休眠<code>interval</code>秒。</p></li><li><p>plt.close() # 关闭图形窗口</p></li></ol></li><li><p>plt.savefig(figure, “”) # 保存图像，输入figure对象及保存路径</p></li><li><p>plt.rcParams[‘font.sans-serif’] = [‘SimHei’] # 指定默认字体避免中文乱码</p></li><li><p>plt.rcParams[‘axes.unicode_minus’] = False # 解决保存图像时负号‘-’显示成方块的问题</p></li></ol><h4 id="配合seaborn库绘制热力图" tabindex="-1"><a class="header-anchor" href="#配合seaborn库绘制热力图"><span>配合seaborn库绘制热力图</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"></span>
<span class="line">fig <span class="token operator">=</span> sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>DataFrame<span class="token punctuation">,</span> vmax<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> vmin<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> center<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> annot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> square<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">&#39;.2g&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># annot=True 显示数据在块上</span></span>
<span class="line"><span class="token comment"># square=True 画出方块</span></span>
<span class="line"><span class="token comment"># fmt 格式化数据</span></span>
<span class="line"><span class="token comment"># cmap 色卡</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="单独修改标签等字体" tabindex="-1"><a class="header-anchor" href="#单独修改标签等字体"><span>单独修改标签等字体</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">my_font <span class="token operator">=</span> font_manager<span class="token punctuation">.</span>FontProperties<span class="token punctuation">(</span>fname<span class="token operator">=</span><span class="token string">&quot;FZXH1JW.TTF&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 导入方正细黑简体</span></span>
<span class="line">plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span>“时间”<span class="token punctuation">,</span>fontproperties <span class="token operator">=</span> my_font<span class="token punctuation">)</span>  <span class="token comment"># 在中文标题的地方加</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="绘制三维图像" tabindex="-1"><a class="header-anchor" href="#绘制三维图像"><span>绘制三维图像</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">from</span> mpl_toolkits<span class="token punctuation">.</span>mplot3d <span class="token keyword">import</span> Axes3D</span>
<span class="line"></span>
<span class="line">ax <span class="token operator">=</span> Axes3D<span class="token punctuation">(</span>fig<span class="token punctuation">,</span> auto_add_to_figure<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line">fig<span class="token punctuation">.</span>add_axes<span class="token punctuation">(</span>ax<span class="token punctuation">)</span></span>
<span class="line">ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span>  <span class="token comment"># x,y,z的class可以是narray、list、Series，但不能是matrix</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)),s("p",null,[n[15]||(n[15]=a("可参考链接:")),s("a",v,[n[14]||(n[14]=a("python （matplotlib）画三维图像")),p(t)])]),n[20]||(n[20]=e(`<h4 id="绘制gif" tabindex="-1"><a class="header-anchor" href="#绘制gif"><span>绘制gif</span></a></h4><p>gif的实质是先画出每个线条的完整图片，再将这些图片保存成一个数组，将这个数组的图片依次保存到gif的文件中，并在每张图片之间加入延时。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> gif  <span class="token comment"># 该库依托与PIL，pip安装此库之前请先install pillow</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># @gif.frame是GIF库用来创建帧序列的装饰器，紧接着的def gm(n)函数的输出就是一个PIL类</span></span>
<span class="line"><span class="token comment"># 如果不定义装饰器将无法调用gif.save()</span></span>
<span class="line"><span class="token decorator annotation punctuation">@gif<span class="token punctuation">.</span>frame</span>  </span>
<span class="line"><span class="token keyword">def</span> <span class="token function">plott</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span></span>
<span class="line">   </span>
<span class="line"></span>
<span class="line">frames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># 创建数组</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    plt<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清空画布上的所有内容</span></span>
<span class="line">    y1 <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x1<span class="token operator">*</span>i<span class="token operator">/</span><span class="token number">100.0</span><span class="token punctuation">)</span></span>
<span class="line">    frame <span class="token operator">=</span> plott<span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">)</span>  <span class="token comment"># 将每个线条的完整图片分别画出来</span></span>
<span class="line">	frames<span class="token punctuation">.</span>append<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>  <span class="token comment"># 将每个线条的完整图片存入一个列表中</span></span>
<span class="line">gif<span class="token punctuation">.</span>save<span class="token punctuation">(</span>frames<span class="token punctuation">,</span><span class="token string">&#39;gif.gif&#39;</span><span class="token punctuation">,</span>duration<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment"># 将列表中的图片依次存入gif文件中，并在每个图片之间加入延时。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[17]||(n[17]=a("可参考链接：")),s("a",f,[n[16]||(n[16]=a("python 输出plot函数的动图，并保存为gif文件")),p(t)])]),n[21]||(n[21]=e(`<h3 id="animation" tabindex="-1"><a class="header-anchor" href="#animation"><span>Animation</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>animation <span class="token keyword">as</span> ani</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2))])}const N=l(c,[["render",y]]),P=JSON.parse('{"path":"/blogs/Python/matplotlib.html","title":"Matplotlib库的学习笔记","lang":"en-US","frontmatter":{"title":"Matplotlib库的学习笔记","date":"2022-09-02T00:00:00.000Z","tags":["Python"],"categories":["Lang"]},"headers":[{"level":2,"title":"Matplotlib库的使用","slug":"matplotlib库的使用","link":"#matplotlib库的使用","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"Matplotlib应用","slug":"matplotlib应用","link":"#matplotlib应用","children":[]},{"level":3,"title":"相关链接","slug":"相关链接","link":"#相关链接","children":[]},{"level":3,"title":"Pyplot","slug":"pyplot","link":"#pyplot","children":[]},{"level":3,"title":"Animation","slug":"animation","link":"#animation","children":[]}]}],"git":{"createdTime":1744420073000,"updatedTime":1744420073000,"contributors":[{"name":"NewLearner4396","email":"NewLearner4396@users.noreply.github.com","commits":1}]},"filePathRelative":"blogs/Python/matplotlib.md"}');export{N as comp,P as data};
