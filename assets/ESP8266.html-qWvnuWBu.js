import{_ as l,c,e as t,a,b as s,d as e,r as o,o as i}from"./app-BSRiWrsC.js";const u={},r={href:"https://docs.espressif.com/projects/esp-at/en/release-v2.2.0.0_esp8266/AT_Binary_Lists/ESP8266_AT_binaries.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.ai-thinker.com/esp8266/sdk",target:"_blank",rel:"noopener noreferrer"},d={href:"https://docs.espressif.com/projects/esp-at/zh_CN/latest/esp32/AT_Command_Set/Basic_AT_Commands.html#",target:"_blank",rel:"noopener noreferrer"};function v(m,n){const p=o("ExternalLinkIcon");return i(),c("div",null,[n[7]||(n[7]=t(`<h2 id="mcu-esp8266" tabindex="-1"><a class="header-anchor" href="#mcu-esp8266"><span>MCU+ESP8266</span></a></h2><p>想使用ESP8266建立TCP服务将MCU串口打印数据发送到电脑上，这样接收数据时电脑可以离设备远一些。</p><p>使用模块为最新的<code>ESP-12S</code></p><p>介绍几个需要用的软件:</p><ol><li>建立TCP服务的：我用的安信可的<code>TCP&amp;UDP测试工具</code>，可选网络调试助手等。</li><li>ESP8266调试工具，将AT指令按键化，当不熟悉AT指令时，入手这个很方便，可惜每次重新打开程序之前做的更改会被重置，需要重写WiFi名称、密码和服务IP，有点麻烦。</li><li>flash_download_tool，给ESP8266烧录固件。</li></ol><h3 id="烧录固件" tabindex="-1"><a class="header-anchor" href="#烧录固件"><span>烧录固件</span></a></h3><p>出厂固件不支持更改串口波特率，而我想调高传数据更快一些，就需要去烧录固件，没想到一烧就是一个下午啊😭</p><p>打开烧录工具选择<code>ESP8266</code>和<code>developer</code>，点三个点导入<code>factory</code>版<code>bin</code>文件后按照图设且设备正确连接烧录即可。波特率可调整为921600避免烧录太慢。</p><p><img src="https://image.krins.cloud/20231206072350.png" alt="20231206072350"></p><p><img src="https://image.krins.cloud/20231206071958.png" alt="20231206071958"></p><p>当我烧录成功后，重连ESP8266发现怎么发送AT指令都没反应，当我将波特率调整为74800，输出不再乱码而是类似如下报错</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">ets Jan <span class="token number">8</span> <span class="token number">2013</span>,rst cause:2, boot mode:<span class="token punctuation">(</span><span class="token number">3,6</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">load 0x40100000, len <span class="token number">6960</span>, room <span class="token number">16</span></span>
<span class="line"><span class="token function">tail</span> <span class="token number">0</span></span>
<span class="line">chksum 0x4f</span>
<span class="line">load 0x3ffe8008, len <span class="token number">24</span>, room <span class="token number">8</span></span>
<span class="line"><span class="token function">tail</span> <span class="token number">0</span></span>
<span class="line">chksum 0xc6</span>
<span class="line">load 0x3ffe8020, len <span class="token number">3196</span>, room <span class="token number">8</span></span>
<span class="line"><span class="token function">tail</span> <span class="token number">4</span></span>
<span class="line">chksum 0x3a</span>
<span class="line">csum 0x3a</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),a("p",null,[n[2]||(n[2]=s("我以为是烧录出错了，换了许多固件和SPI烧录模式，都不得用。最后发现原来是")),a("a",r,[n[0]||(n[0]=s("乐鑫固件")),e(p)]),n[3]||(n[3]=s("烧录后UART引脚为Rx:15，TX:13，而我板载连线是Rx:15，Tx:16，无奈只能更换其他固件。在")),a("a",k,[n[1]||(n[1]=s("安信可相关网页")),e(p)]),n[4]||(n[4]=s("找到一些不会改变引脚的固件。博安通的AT固件仍然不能更改波特率，尝试第五个：出厂默认固件，终于成功更改波特率而不是返回ERROR了。"))]),n[8]||(n[8]=a("p",null,[s("注意更改波特率之前要用固件默认的115200速率连接通信，然后使用"),a("code",null,"AT+CIOBAUD=921600"),s("设置新的波特率为921600，这个设置掉电能会保存不用重新设置。然后断开串口，用921600速率重连串口就能和设备正常通信而不会乱码了。")],-1)),a("p",null,[a("a",d,[n[5]||(n[5]=s("乐鑫AT指令集")),e(p)]),n[6]||(n[6]=s("，不保证固件完全支持。"))]),n[9]||(n[9]=t(`<h3 id="使用mcu初始化esp8266建立网络服务" tabindex="-1"><a class="header-anchor" href="#使用mcu初始化esp8266建立网络服务"><span>使用MCU初始化ESP8266建立网络服务</span></a></h3><p>首先确保两个设备的串口正确连接。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">extern</span> UART_HandleTypeDef huart2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">char</span> <span class="token operator">*</span>SSID <span class="token operator">=</span> <span class="token string">&quot;LAPTOP-LI4396&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span> <span class="token operator">*</span>PASSWORD <span class="token operator">=</span> <span class="token string">&quot;-Y24j533&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span> <span class="token operator">*</span>serverIP <span class="token operator">=</span> <span class="token string">&quot;192.168.137.1&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span> <span class="token operator">*</span>serverPort <span class="token operator">=</span> <span class="token string">&quot;800&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">ESP8266_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// AT commands for ESP8266</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;+++&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">ESP8266_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">// test AT startup</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WaitingForResponse</span><span class="token punctuation">(</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">ESP8266_Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">// soft reset</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WaitingForResponse</span><span class="token punctuation">(</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">ESP8266_SetMode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// set mode to station</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WaitingForResponse</span><span class="token punctuation">(</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">ESP8266_ConnectWifi</span><span class="token punctuation">(</span>SSID<span class="token punctuation">,</span> PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// connect to AP</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WaitingForResponse</span><span class="token punctuation">(</span><span class="token string">&quot;IP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">ESP8266_CIPSTATUS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// check connection status</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WaitingForResponse</span><span class="token punctuation">(</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">ESP8266_SetMultipleConnections</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// set single connection mode</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WaitingForResponse</span><span class="token punctuation">(</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">ESP8266_ConnectServer</span><span class="token punctuation">(</span>serverIP<span class="token punctuation">,</span> serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// connect to server</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WaitingForResponse</span><span class="token punctuation">(</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">ESP8266_TransTxEnable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// enable transparent transmission</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WaitingForResponse</span><span class="token punctuation">(</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">ESP8266_TransTxStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// start transparent transmission</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WaitingForResponse</span><span class="token punctuation">(</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// send data</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">ESP8266_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;AT\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// should return OK</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// soft reset</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">ESP8266_Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;AT+RST\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// should return OK</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// *view class</span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">AT+CMD? check current value</span>
<span class="line">AT+CMD=? check command setting range</span>
<span class="line">AT+CMD execute command</span>
<span class="line">*/</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// check mode</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">ESP8266_CheckMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;AT+CWMODE?\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token comment">// should return mode</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1 is station, 2 is AP, 3 is both</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">ESP8266_SetMode</span><span class="token punctuation">(</span><span class="token keyword">int</span> mode<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;AT+CWMODE=%d\\r\\n&quot;</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">ESP8266_ConnectWifi</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ssid<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;AT+CWJAP=\\&quot;%s\\&quot;,\\&quot;%s\\&quot;\\r\\n&quot;</span><span class="token punctuation">,</span> ssid<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// check connection status</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">ESP8266_CIPSTATUS</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;AT+CIPSTATUS\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 0 is single, 1 is multiple</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">ESP8266_SetMultipleConnections</span><span class="token punctuation">(</span><span class="token keyword">int</span> enable<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;AT+CIPMUX=%d\\r\\n&quot;</span><span class="token punctuation">,</span> enable <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// conncet to server using TCP</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">ESP8266_ConnectServer</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ip<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>port<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;AT+CIPSTART=\\&quot;TCP\\&quot;,\\&quot;%s\\&quot;,%s\\r\\n&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 0 is non-transparent, 1 is transparent</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">ESP8266_TransTxEnable</span><span class="token punctuation">(</span><span class="token keyword">int</span> enable<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;AT+CIPMODE=%d\\r\\n&quot;</span><span class="token punctuation">,</span> enable <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">ESP8266_TransTxStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;AT+CIPSEND\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// close Transparent Transmission</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">ESP8266_TransTxCancle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;+++&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// auto connect to server and enable transparent transmission</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">ESP8266_AutoConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;AT+SAVETRANSLINK=1,\\&quot;%s\\&quot;,%d,\\&quot;TCP\\&quot;\\r\\n&quot;</span><span class="token punctuation">,</span> serverIP<span class="token punctuation">,</span> serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">WaitingForResponse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>response<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> c<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> response_length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HAL_UART_Receive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">==</span> HAL_OK<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> response<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                buffer<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span></span>
<span class="line">                i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> response_length<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    buffer<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">else</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">                j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5))])}const f=l(u,[["render",v]]),g=JSON.parse('{"path":"/blogs/STM32/ESP8266.html","title":"ESP8266烧录固件与MCU对其的初始化","lang":"en-US","frontmatter":{"title":"ESP8266烧录固件与MCU对其的初始化","date":"2023-12-06T00:00:00.000Z","tags":["STM32","HAL库"],"categories":["C"]},"headers":[{"level":2,"title":"MCU+ESP8266","slug":"mcu-esp8266","link":"#mcu-esp8266","children":[{"level":3,"title":"烧录固件","slug":"烧录固件","link":"#烧录固件","children":[]},{"level":3,"title":"使用MCU初始化ESP8266建立网络服务","slug":"使用mcu初始化esp8266建立网络服务","link":"#使用mcu初始化esp8266建立网络服务","children":[]}]}],"git":{"createdTime":1744420073000,"updatedTime":1744420073000,"contributors":[{"name":"NewLearner4396","email":"NewLearner4396@users.noreply.github.com","commits":1}]},"filePathRelative":"blogs/STM32/ESP8266.md"}');export{f as comp,g as data};
