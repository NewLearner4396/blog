import{_ as a,c as l,e as t,a as s,b as p,d as o,r as i,o as c}from"./app-BSRiWrsC.js";const r={},u={href:"https://zhuanlan.zhihu.com/p/351998173",target:"_blank",rel:"noopener noreferrer"};function d(h,n){const e=i("ExternalLinkIcon");return c(),l("div",null,[n[1]||(n[1]=t(`<h2 id="openpyxl库的使用" tabindex="-1"><a class="header-anchor" href="#openpyxl库的使用"><span>openpyxl库的使用</span></a></h2><h3 id="python下的excel库" tabindex="-1"><a class="header-anchor" href="#python下的excel库"><span>Python下的Excel库</span></a></h3><p>Python 中有大量的原生和第三方 Excel 操作包，各有所长，不过对于刚使用 Python 与 Excel 交互的同学来说，可能有点目不暇接，所以先简单梳理一下常见的一些 Excel 包</p><ul><li><strong>OpenPyXL</strong> 是个读写 Excel 2010 xlsx/xlsm/xltx/xltm 的 Python 库，简单易用，功能广泛，单元格格式/图片/表格/公式/筛选/批注/文件保护等等功能应有尽有，图表功能是其一大亮点</li><li><strong>xlwings</strong> 是一个基于 BSD 授权协议的 Python 库，可以轻松的使用 Python 操作 Excel，也可以在 Excel 中调用 Python，以接近 VBA 语法的实现 Excel 编程，支持 Excel 宏，并且可以作为 Web 服务器，提供 REST API 接口</li><li><strong>pandas</strong> 数据处理是 pandas 的立身之本，Excel 作为 pandas 输入/输出数据的容器</li><li><strong>win32com</strong> 从命名上就可以看出，这是一个处理 windows 应用的扩展，Excel 只是该库能实现的一小部分功能。该库还支持 office 的众多操作。需要注意的是，该库不单独存在，可通过安装 pypiwin32 或者 pywin32 获取</li><li><strong>Xlsxwriter</strong> 拥有丰富的特性，支持图片/表格/图表/筛选/格式/公式等，功能与 openpyxl 相似，优点是相比 openpyxl 还支持 VBA 文件导入，迷你图等功能，缺点是不能打开/修改已有文件，意味着使用 xlsxwriter 需要从零开始</li><li><strong>DataNitro</strong> 一个 Excel 的付费插件，内嵌到 Excel 中，可完全替代 VBA，在 Excel 中使用 python 脚本。既然被称为 Excel 中的 python，同时可以与其他 python 库协同。</li><li><strong>xlutils</strong> 基于 xlrd/xlwt，老牌 python 包，算是该领域的先驱，功能特点中规中矩，比较大的缺点是仅支持 xls 文件。</li></ul><h3 id="操作excel文件" tabindex="-1"><a class="header-anchor" href="#操作excel文件"><span>操作Excel文件</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> openpyxl <span class="token keyword">as</span> xl</span>
<span class="line"><span class="token comment"># 创建一个 workbook</span></span>
<span class="line">wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 或打开一个 workbook</span></span>
<span class="line">wb <span class="token operator">=</span> xl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 获取被激活的 worksheet</span></span>
<span class="line">ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active</span>
<span class="line">wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&quot;sample.xlsx&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是：</p><ul><li>新创建的 workbook 对象，会自带一个名为 Sheet 的表单，Office Excel 新建会创建 3 个</li><li>创建的 workbook 会将第一个 <code>表单</code> 激活，通过 wb.active 获取引用</li><li>像 python-docx work 库一样，save 方法会立即保存，不会有任何提示，建议选择不同文件名来保存</li></ul><p>load_workbook 除了参数 filename外为还有一些有用的参数：</p><ul><li>read_only：是否为只读模式，对于超大型文件，要提升效率有帮助</li><li>keep_vba ：是否保留 vba 代码，即打开 Excel 文件时，开启并保留宏</li><li>guess_types：是否做在读取单元格数据类型时，做类型判断</li><li>data_only：是否将公式转换为结果，即包含公式的单元格，是否显示最近的计算结果</li><li>keep_links：是否保留外部链接</li></ul><h3 id="操作sheet" tabindex="-1"><a class="header-anchor" href="#操作sheet"><span>操作Sheet</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">ws1 <span class="token operator">=</span> wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span><span class="token string">&quot;sheet&quot;</span><span class="token punctuation">)</span>  <span class="token comment">#创建一个 sheet 名为 sheet</span></span>
<span class="line">ws1<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&quot;新表单&quot;</span>  <span class="token comment"># 设置 sheet 标题</span></span>
<span class="line">ws2 <span class="token operator">=</span> wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span><span class="token string">&quot;mysheet&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个 sheet，插入到最前面 默认插在后面</span></span>
<span class="line">ws2<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">u&quot;你好&quot;</span>  <span class="token comment"># 设置 sheet 标题</span></span>
<span class="line"></span>
<span class="line">ws1<span class="token punctuation">.</span>sheet_properties<span class="token punctuation">.</span>tabColor <span class="token operator">=</span> <span class="token string">&quot;1072BA&quot;</span>  <span class="token comment"># 设置 sheet 标签背景色</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 获取 sheet</span></span>
<span class="line">ws3 <span class="token operator">=</span> wb<span class="token punctuation">.</span>get_sheet_by_name<span class="token punctuation">(</span><span class="token string">u&quot;你好&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># ws4 = wb[&#39;New Title&#39;]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 复制 sheet</span></span>
<span class="line">ws1_copy <span class="token operator">=</span> wb<span class="token punctuation">.</span>copy_worksheet<span class="token punctuation">(</span>ws1<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 删除 sheet</span></span>
<span class="line">wb<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>ws1<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>每个 Workbook 中都有一个被激活的 sheet，一般都是第一个，可以通过 active 直接获取</li><li>可以通过 sheet 名来获取 sheet 对象</li><li>创建 sheet时需要提供 sheet 名称参数，如果该名称的 sheet 已经存在，则会在名称后添加 1，再有重复添加 2，以此类推</li><li>获得 sheet 对象后，可以设置 名称（title），背景色等属性</li><li>同一个 Workbook 对象中，可以复制 sheet，需要将源 sheet 对象作为参数，复制的新 sheet 会在最末尾</li><li>可以删除一个 sheet，参数是目标 sheet 对象</li></ul><h3 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h3>`,14)),s("p",null,[s("a",u,[n[0]||(n[0]=p("Python的Excel 神器 —— OpenPyXl")),o(e)])])])}const m=a(r,[["render",d]]),x=JSON.parse('{"path":"/blogs/Python/openpyxl.html","title":"openpyxl库的学习笔记","lang":"en-US","frontmatter":{"title":"openpyxl库的学习笔记","date":"2022-09-10T00:00:00.000Z","tags":["Python"],"categories":["Lang"]},"headers":[{"level":2,"title":"openpyxl库的使用","slug":"openpyxl库的使用","link":"#openpyxl库的使用","children":[{"level":3,"title":"Python下的Excel库","slug":"python下的excel库","link":"#python下的excel库","children":[]},{"level":3,"title":"操作Excel文件","slug":"操作excel文件","link":"#操作excel文件","children":[]},{"level":3,"title":"操作Sheet","slug":"操作sheet","link":"#操作sheet","children":[]},{"level":3,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}]}],"git":{"createdTime":1744420073000,"updatedTime":1744420073000,"contributors":[{"name":"NewLearner4396","email":"NewLearner4396@users.noreply.github.com","commits":1}]},"filePathRelative":"blogs/Python/openpyxl.md"}');export{m as comp,x as data};
