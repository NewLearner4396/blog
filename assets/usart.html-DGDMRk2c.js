import{_ as c,c as l,e as t,a as n,b as a,d as e,r as i,o}from"./app-BSRiWrsC.js";const u={},r={href:"https://blog.csdn.net/qq_19655649/article/details/114390717",target:"_blank",rel:"noopener noreferrer"},k={href:"https://blog.csdn.net/wanglei_11/article/details/131576165",target:"_blank",rel:"noopener noreferrer"};function m(d,s){const p=i("ExternalLinkIcon");return o(),l("div",null,[s[3]||(s[3]=t(`<h2 id="不使用微库的串口printf及串口接收的多种处理" tabindex="-1"><a class="header-anchor" href="#不使用微库的串口printf及串口接收的多种处理"><span>不使用微库的串口printf及串口接收的多种处理</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;main.h&quot;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;uart.h&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="串口重定向" tabindex="-1"><a class="header-anchor" href="#串口重定向"><span>串口重定向</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">import</span><span class="token punctuation">(</span>__use_no_semihosting<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__GNUC__</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUTCHAR_PROTOTYPE</span> <span class="token expression"><span class="token keyword">int</span> <span class="token function">__io_putchar</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUTCHAR_PROTOTYPE</span> <span class="token expression"><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span>f<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">__FILE</span></span>
<span class="line"><span class="token punctuation">{</span>  </span>
<span class="line">	<span class="token keyword">int</span> handle<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">FILE __stdout<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// FILE __stdin;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">_sys_exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">	x <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 若是未引用&quot;usart.h&quot;要extern所用的串口号</span></span>
<span class="line"><span class="token comment">// extern UART_HandleTypeDef huart2;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span>f<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改为自己使用的串口</span></span>
<span class="line">  <span class="token keyword">return</span> ch<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">__io_putchar</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改为自己使用的串口</span></span>
<span class="line">  <span class="token keyword">return</span> ch<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="串口接收" tabindex="-1"><a class="header-anchor" href="#串口接收"><span>串口接收</span></a></h3><h4 id="直接接收" tabindex="-1"><a class="header-anchor" href="#直接接收"><span>直接接收</span></a></h4><p>直接使用<code>HAL_UART_Receive</code>函数一个字符一个字符接收</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token function">HAL_UART_Receive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span>receive_buff<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 接收10个字符</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>receive_buff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recive buff is %s \\r\\n&quot;</span><span class="token punctuation">,</span>receive_buff<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">memset</span><span class="token punctuation">(</span>receive_buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清除接收内容</span></span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用中断接收" tabindex="-1"><a class="header-anchor" href="#使用中断接收"><span>使用中断接收</span></a></h4><p><strong>初始化时记得打开串口的中断</strong></p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">uint8_t</span> aRxBuffer<span class="token punctuation">;</span>			<span class="token comment">//接收中断缓冲</span></span>
<span class="line"><span class="token class-name">uint8_t</span> Uart1_RxBuff<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>		<span class="token comment">//接收缓冲</span></span>
<span class="line"><span class="token class-name">uint8_t</span> Uart1_Rx_Cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>		<span class="token comment">//接收缓冲计数</span></span>
<span class="line"><span class="token class-name">uint8_t</span> Uart1_RxFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">uint8_t</span>	cAlmStr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;数据溢出(大于256)\\r\\n&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">HAL_UART_RxCpltCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>huart<span class="token operator">-&gt;</span>Instance <span class="token operator">==</span> USART1<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>Uart1_Rx_Cnt <span class="token operator">&gt;=</span> <span class="token number">255</span><span class="token punctuation">)</span>  <span class="token comment">//溢出判断</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Uart1_Rx_Cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">memset</span><span class="token punctuation">(</span>Uart1_RxBuff<span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Uart1_RxBuff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>cAlmStr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cAlmStr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发送溢出信号	</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Uart1_RxBuff<span class="token punctuation">[</span>Uart1_Rx_Cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> aRxBuffer<span class="token punctuation">;</span>   <span class="token comment">//接收数据转存</span></span>
<span class="line">        </span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Uart1_RxBuff<span class="token punctuation">[</span>Uart1_Rx_Cnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>Uart1_RxBuff<span class="token punctuation">[</span>Uart1_Rx_Cnt<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x0D</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//根据预先设定的结束帧判断结束</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                Uart1_RxFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 接收结束</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token function">HAL_UART_Receive_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>aRxBuffer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//再开启接收中断</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考测试函数为</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token function">HAL_UART_Receive_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span><span class="token operator">&amp;</span>aRxBuffer<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>Uart1_RxFlag <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;recive buff is %s\\r\\n&quot;</span><span class="token punctuation">,</span>Uart1_RxBuff<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Uart1_RxFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        Uart1_Rx_Cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">memset</span><span class="token punctuation">(</span>Uart1_RxBuff<span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用定时器判断超时无数据发送" tabindex="-1"><a class="header-anchor" href="#使用定时器判断超时无数据发送"><span>使用定时器判断超时无数据发送</span></a></h4><p>预设若是超过5ms未有新数据则判断接收结束，比上个方法好处是无需定义结束帧，避免结束帧出现在数据中间误触发退出机制。</p>`,16)),s[4]||(s[4]=n("p",null,[a("因为预分频计数器是16bit最大为65535，而主频为M级别，所以我们一般能拿到的时间精度为0.1ms。 根据公式，"),n("mjx-container",{class:"MathJax",jax:"CHTML",style:{"font-size":"110%",position:"relative"}},[n("mjx-math",{class:"MJX-TEX","aria-hidden":"true"},[n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D447 TEX-I"})]),n("mjx-mo",{class:"mjx-n",space:"4"},[n("mjx-c",{class:"mjx-c3D"})]),n("mjx-mfrac",{space:"4"},[n("mjx-frac",null,[n("mjx-num",null,[n("mjx-nstrut"),n("mjx-mrow",{size:"s"},[n("mjx-mi",{class:"mjx-n"},[n("mjx-utext",{style:{"font-family":"MJXZERO, serif"},variant:"normal"},"时")]),n("mjx-mi",{class:"mjx-n"},[n("mjx-utext",{style:{"font-family":"MJXZERO, serif"},variant:"normal"},"钟")]),n("mjx-mi",{class:"mjx-n"},[n("mjx-utext",{style:{"font-family":"MJXZERO, serif"},variant:"normal"},"频")]),n("mjx-mi",{class:"mjx-n"},[n("mjx-utext",{style:{"font-family":"MJXZERO, serif"},variant:"normal"},"率")])])]),n("mjx-dbox",null,[n("mjx-dtable",null,[n("mjx-line"),n("mjx-row",null,[n("mjx-den",null,[n("mjx-dstrut"),n("mjx-mrow",{size:"s"},[n("mjx-mo",{class:"mjx-n"},[n("mjx-c",{class:"mjx-c28"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D443 TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D45F TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D452 TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D460 TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D450 TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D44E TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D459 TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D452 TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D45F TEX-I"})]),n("mjx-mo",{class:"mjx-n"},[n("mjx-c",{class:"mjx-c2B"})]),n("mjx-mn",{class:"mjx-n"},[n("mjx-c",{class:"mjx-c31"})]),n("mjx-mo",{class:"mjx-n"},[n("mjx-c",{class:"mjx-c29"})]),n("mjx-mo",{class:"mjx-n"},[n("mjx-c",{class:"mjx-cD7"})]),n("mjx-mo",{class:"mjx-n"},[n("mjx-c",{class:"mjx-c28"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D436 TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D45C TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D462 TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D45B TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D461 TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D452 TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D45F TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D443 TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D452 TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D45F TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D456 TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D45C TEX-I"})]),n("mjx-mi",{class:"mjx-i"},[n("mjx-c",{class:"mjx-c1D451 TEX-I"})]),n("mjx-mo",{class:"mjx-n"},[n("mjx-c",{class:"mjx-c2B"})]),n("mjx-mn",{class:"mjx-n"},[n("mjx-c",{class:"mjx-c31"})]),n("mjx-mo",{class:"mjx-n"},[n("mjx-c",{class:"mjx-c29"})])])])])])])])])]),n("mjx-assistive-mml",{unselectable:"on",display:"inline"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("mi",null,"T"),n("mo",null,"="),n("mfrac",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"时"),n("mi",{mathvariant:"normal"},"钟"),n("mi",{mathvariant:"normal"},"频"),n("mi",{mathvariant:"normal"},"率")]),n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"P"),n("mi",null,"r"),n("mi",null,"e"),n("mi",null,"s"),n("mi",null,"c"),n("mi",null,"a"),n("mi",null,"l"),n("mi",null,"e"),n("mi",null,"r"),n("mo",null,"+"),n("mn",null,"1"),n("mo",{stretchy:"false"},")"),n("mo",null,"×"),n("mo",{stretchy:"false"},"("),n("mi",null,"C"),n("mi",null,"o"),n("mi",null,"u"),n("mi",null,"n"),n("mi",null,"t"),n("mi",null,"e"),n("mi",null,"r"),n("mi",null,"P"),n("mi",null,"e"),n("mi",null,"r"),n("mi",null,"i"),n("mi",null,"o"),n("mi",null,"d"),n("mo",null,"+"),n("mn",null,"1"),n("mo",{stretchy:"false"},")")])])])])]),a("，假设主频84MHz，计时周期设为5ms，预分频系数Prescaler为8399，计数周期CounterPeriod为49。")],-1)),s[5]||(s[5]=t(`<p>一样要定义接收相关变量和串口中断回调函数</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token class-name">uint8_t</span> aRxBuffer<span class="token punctuation">;</span>			<span class="token comment">//接收中断缓冲</span></span>
<span class="line"><span class="token class-name">uint8_t</span> Uart1_RxBuff<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>		<span class="token comment">//接收缓冲</span></span>
<span class="line"><span class="token class-name">uint8_t</span> Uart1_Rx_Cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>		<span class="token comment">//接收缓冲计数</span></span>
<span class="line"><span class="token class-name">uint8_t</span> Uart1_RxFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">uint8_t</span>	cAlmStr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;数据溢出(大于256)\\r\\n&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">HAL_UART_RxCpltCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>huart <span class="token operator">-&gt;</span> Instance <span class="token operator">==</span> USART1<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>Uart1_Rx_Cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">__HAL_TIM_CLEAR_FLAG</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim6<span class="token punctuation">,</span>TIM_FLAG_UPDATE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">HAL_TIM_Base_Start_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim6<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            Uart1_RxBuff<span class="token punctuation">[</span>Uart1_Rx_Cnt<span class="token punctuation">]</span> <span class="token operator">=</span> aRxBuffer<span class="token punctuation">;</span></span>
<span class="line">            Uart1_Rx_Cnt <span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Uart1_RxBuff<span class="token punctuation">[</span>Uart1_Rx_Cnt <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> aRxBuffer<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>Uart1_Rx_Cnt <span class="token operator">&gt;=</span> <span class="token number">255</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            Uart1_Rx_Cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            Uart1_RxFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">memset</span><span class="token punctuation">(</span>Uart1_RxBuff<span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">HAL_UART_Receive_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span><span class="token operator">&amp;</span>aRxBuffer<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定时器回调函数设为</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">HAL_TIM_PeriodElapsedCallback</span><span class="token punctuation">(</span>TIM_HandleTypeDef <span class="token operator">*</span>htim<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>htim <span class="token operator">-&gt;</span>Instance <span class="token operator">==</span> TIM6<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">HAL_TIM_Base_Stop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim6<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">__HAL_TIM_SetCounter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>htim6<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Uart1_RxFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试函数并无不同</p><h4 id="使用dma接收" tabindex="-1"><a class="header-anchor" href="#使用dma接收"><span>使用DMA接收</span></a></h4><p>当需要接收大片数据时可以启用DMA避免程序重复进入中断搬移数据到buffer中。</p><p>串口初始化如下： （记得使能DMA和中断，我将串口速率设的比平常高。）</p><p><img src="https://image.krins.cloud/20231206055037.png" alt="20231206055037"></p><p><img src="https://image.krins.cloud/20231206055132.png" alt="20231206055132"></p><p><img src="https://image.krins.cloud/20231206055203.png" alt="20231206055203"></p><p>CubeMX会帮我们将代码初始化好，但我们还需要在<code>usart.h</code>文件中定义一个接收结构体和一个自定义的使能函数，在<code>usart.c</code>中用上他们并把中断回调函数也写在这，不要忘记在<code>stm32f4xx_it.c</code>文件中把USART2的中断服务函数处理一下。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USART_DMA_REC_SIZE</span> <span class="token expression"><span class="token number">600</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USART_REC_SIZE</span> <span class="token expression"><span class="token number">1200</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">uint8_t</span> UsartRecFlag<span class="token punctuation">;</span> <span class="token comment">// 标志位</span></span>
<span class="line">    <span class="token class-name">uint16_t</span> UsartRecLen<span class="token punctuation">;</span> <span class="token comment">// 接收数据长度</span></span>
<span class="line">    <span class="token class-name">uint16_t</span> UsartDMARecLEN<span class="token punctuation">;</span> <span class="token comment">// DMA 接收长度</span></span>
<span class="line">    <span class="token class-name">uint8_t</span>  UsartDMARecBuffer<span class="token punctuation">[</span>USART_DMA_REC_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// DMA 接收数组</span></span>
<span class="line">    <span class="token class-name">uint8_t</span>  UsartRecBuffer<span class="token punctuation">[</span>USART_REC_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 接收组</span></span>
<span class="line"><span class="token punctuation">}</span>UART_UserTypeDef<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extern</span> UART_UserTypeDef uusart2<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">EnableUsart_It</span><span class="token punctuation">(</span>UART_HandleTypeDef<span class="token operator">*</span> huart<span class="token punctuation">,</span> UART_UserTypeDef<span class="token operator">*</span> uusart<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 打开相关中断</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">EnableUsart_It</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">,</span> UART_UserTypeDef <span class="token operator">*</span>uusart<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">__HAL_UART_ENABLE_IT</span><span class="token punctuation">(</span>huart<span class="token punctuation">,</span> UART_IT_RXNE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">__HAL_UART_ENABLE_IT</span><span class="token punctuation">(</span>huart<span class="token punctuation">,</span> UART_IT_IDLE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">__HAL_UART_CLEAR_IDLEFLAG</span><span class="token punctuation">(</span>huart<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">HAL_UART_Receive_DMA</span><span class="token punctuation">(</span>huart<span class="token punctuation">,</span> uusart<span class="token operator">-&gt;</span>UsartDMARecBuffer<span class="token punctuation">,</span> USART_DMA_REC_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">HAL_UART_RxCpltCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>huart<span class="token operator">-&gt;</span>Instance <span class="token operator">==</span> USART2<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>uusart2<span class="token punctuation">.</span>UsartRecLen <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>uusart2<span class="token punctuation">.</span>UsartRecBuffer<span class="token punctuation">[</span>uusart2<span class="token punctuation">.</span>UsartRecLen<span class="token punctuation">]</span><span class="token punctuation">,</span> uusart2<span class="token punctuation">.</span>UsartDMARecBuffer<span class="token punctuation">,</span> uusart2<span class="token punctuation">.</span>UsartDMARecLEN<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        uusart2<span class="token punctuation">.</span>UsartRecLen <span class="token operator">+=</span> uusart2<span class="token punctuation">.</span>UsartDMARecLEN<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>uusart2<span class="token punctuation">.</span>UsartRecBuffer<span class="token punctuation">,</span> uusart2<span class="token punctuation">.</span>UsartDMARecBuffer<span class="token punctuation">,</span> uusart2<span class="token punctuation">.</span>UsartDMARecLEN<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        uusart2<span class="token punctuation">.</span>UsartRecLen <span class="token operator">+=</span> uusart2<span class="token punctuation">.</span>UsartDMARecLEN<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">memset</span><span class="token punctuation">(</span>uusart2<span class="token punctuation">.</span>UsartDMARecBuffer<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        uusart2<span class="token punctuation">.</span>UsartRecFlag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">USART2_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* USER CODE BEGIN USART2_IRQn 0 */</span></span>
<span class="line">    <span class="token class-name">uint16_t</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">__HAL_UART_CLEAR_IDLEFLAG</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">HAL_UART_DMAStop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭DMA</span></span>
<span class="line">        temp <span class="token operator">=</span> huart2<span class="token punctuation">.</span>Instance <span class="token operator">-&gt;</span> SR<span class="token punctuation">;</span> <span class="token comment">// 清除SR状态寄存器</span></span>
<span class="line">        temp <span class="token operator">=</span> huart2<span class="token punctuation">.</span>Instance <span class="token operator">-&gt;</span> DR<span class="token punctuation">;</span> <span class="token comment">// 清除DR数据寄存器，用来清除中断</span></span>
<span class="line">        temp <span class="token operator">=</span> hdma_usart2_rx<span class="token punctuation">.</span>Instance <span class="token operator">-&gt;</span> NDTR<span class="token punctuation">;</span> <span class="token comment">// 获取未传输的数据个数</span></span>
<span class="line">        uusart2<span class="token punctuation">.</span>UsartDMARecLEN <span class="token operator">=</span> USART_DMA_REC_SIZE <span class="token operator">-</span> temp<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">HAL_UART_RxCpltCallback</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/* USER CODE END USART2_IRQn 0 */</span></span>
<span class="line">    <span class="token function">HAL_UART_IRQHandler</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/* USER CODE BEGIN USART2_IRQn 1 */</span></span>
<span class="line">    <span class="token function">HAL_UART_Receive_DMA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> uusart2<span class="token punctuation">.</span>UsartDMARecBuffer<span class="token punctuation">,</span> USART_DMA_REC_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新打开DMA</span></span>
<span class="line">    <span class="token comment">/* USER CODE END USART2_IRQn 1 */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考测试函数为</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">HAL_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">SystemClock_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">MX_DMA_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">MX_USART1_UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">EnableUsart_It</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uusart2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>uusart2<span class="token punctuation">.</span>UsartRecFlag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;rec buff is %s\\r\\n&quot;</span><span class="token punctuation">,</span>uusart2<span class="token punctuation">.</span>UsartRecBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">memset</span><span class="token punctuation">(</span>uusart2<span class="token punctuation">.</span>UsartRecBuffer<span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span>USART_REC_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            uusart2<span class="token punctuation">.</span>UsartRecLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            uusart2<span class="token punctuation">.</span>UsartRecFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用dma空闲中断" tabindex="-1"><a class="header-anchor" href="#使用dma空闲中断"><span>使用DMA空闲中断</span></a></h4><p><strong>半满中断、全满中断实现乒乓缓存</strong></p><p>DMA设置成<code>circular</code>模式， DMA 接收只用开启一次，缓冲区满后 DMA 会自动重置到缓冲区起始位置，不再需要每次接收完成后重新开启 DMA。</p><p><img src="https://image.krins.cloud/image-20250402102827038.png" alt="image-20250402102827038"></p><p><img src="https://image.krins.cloud/image-20250402102905313.png" alt="image-20250402102905313"></p><p>开启串口接收</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RX_BUF_SIZE</span> <span class="token expression"><span class="token number">20</span></span></span></span>
<span class="line"><span class="token class-name">uint8_t</span> USART1_Rx_buf<span class="token punctuation">[</span>RX_BUF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">HAL_UARTEx_ReceiveToIdle_DMA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> USART1_Rx_buf<span class="token punctuation">,</span> RX_BUF_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>串口回调函数</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">HAL_UARTEx_RxEventCallback</span><span class="token punctuation">(</span>UART_HandleTypeDef <span class="token operator">*</span>huart<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> Size<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token class-name">uint8_t</span> Rx_buf_pos<span class="token punctuation">;</span>	<span class="token comment">//本次回调接收的数据在缓冲区的起点</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token class-name">uint8_t</span> Rx_length<span class="token punctuation">;</span>	<span class="token comment">//本次回调接收数据的长度</span></span>
<span class="line">    Rx_length <span class="token operator">=</span> Size <span class="token operator">-</span> Rx_buf_pos<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">fifo_s_puts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>uart_rx_fifo<span class="token punctuation">,</span> <span class="token operator">&amp;</span>USART1_Rx_buf<span class="token punctuation">[</span>Rx_buf_pos<span class="token punctuation">]</span><span class="token punctuation">,</span> Rx_length<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//数据填入 FIFO</span></span>
<span class="line">    Rx_buf_pos <span class="token operator">+=</span> Rx_length<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>Rx_buf_pos <span class="token operator">&gt;=</span> RX_BUF_SIZE<span class="token punctuation">)</span> Rx_buf_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	<span class="token comment">//缓冲区用完后，返回 0 处重新开始</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于串口寄存器只能储存一个字节，所以开启直接模式的 DMA 每个字节都要搬运一次数据到内存缓冲区中。而 DMA 的 FIFO 实际效果简单来说就是攒一批数据一起发送出去，可以减少软件开销和 AHB 总线上数据传输的次数，适合数据连续不断且系统中还有其他开销较大的任务这种场景使用。不过也是由于 DMA 的 FIFO 必须攒一批才能发送，攒不够就不发了，所以也有一些局限性。<strong>此处没有使用 DMA 的 FIFO</strong>，而是使用直接模式。</p>`,27)),n("p",null,[s[1]||(s[1]=a("参考链接：")),n("a",r,[s[0]||(s[0]=a("小记stm32实现串口接收的四种方法（hal库）")),e(p)])]),n("p",null,[n("a",k,[s[2]||(s[2]=a("STM32 HAL 库实现乒乓缓存加空闲中断的串口 DMA 收发机制，轻松跑上 2M 波特率")),e(p)])])])}const b=c(u,[["render",m]]),x=JSON.parse('{"path":"/blogs/STM32/usart.html","title":"stdio结合串口收发","lang":"en-US","frontmatter":{"title":"stdio结合串口收发","date":"2023-12-02T00:00:00.000Z","tags":["STM32","HAL库"],"categories":["C"]},"headers":[{"level":2,"title":"不使用微库的串口printf及串口接收的多种处理","slug":"不使用微库的串口printf及串口接收的多种处理","link":"#不使用微库的串口printf及串口接收的多种处理","children":[{"level":3,"title":"串口重定向","slug":"串口重定向","link":"#串口重定向","children":[]},{"level":3,"title":"串口接收","slug":"串口接收","link":"#串口接收","children":[]}]}],"git":{"createdTime":1744420073000,"updatedTime":1744420073000,"contributors":[{"name":"NewLearner4396","email":"NewLearner4396@users.noreply.github.com","commits":1}]},"filePathRelative":"blogs/STM32/usart.md"}');export{b as comp,x as data};
