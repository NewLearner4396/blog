import{_ as l,c as o,e as p,a as s,b as a,d as t,r as i,o as c}from"./app-BSRiWrsC.js";const u={},r={href:"https://github.com/goto456/stopwords",target:"_blank",rel:"noopener noreferrer"},d={href:"https://zhuanlan.zhihu.com/p/27626809",target:"_blank",rel:"noopener noreferrer"};function k(v,n){const e=i("ExternalLinkIcon");return c(),o("div",null,[n[4]||(n[4]=p(`<h2 id="如何快速制作一张词云" tabindex="-1"><a class="header-anchor" href="#如何快速制作一张词云"><span>如何快速制作一张词云</span></a></h2><h3 id="库" tabindex="-1"><a class="header-anchor" href="#库"><span>库</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> jieba</span>
<span class="line"><span class="token keyword">import</span> wordcloud</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取分词字符串" tabindex="-1"><a class="header-anchor" href="#获取分词字符串"><span>获取分词字符串</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 导入文件</span></span>
<span class="line">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;path/filename.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span></span>
<span class="line">t <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="去除常见标点" tabindex="-1"><a class="header-anchor" href="#去除常见标点"><span>去除常见标点</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">popPunctuation</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    punctuation <span class="token operator">=</span> <span class="token triple-quoted-string string">r&quot;&quot;&quot;!&quot;#$%&amp;&#39;()*+,-./:;&lt;=&gt;?@[\\]^_\`{|}~“”？，！【】（）、。：；’‘……￥·&quot;&quot;&quot;</span></span>
<span class="line">    punctuationDict <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> punctuation<span class="token punctuation">}</span></span>
<span class="line">    puncTable <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>punctuationDict<span class="token punctuation">)</span></span>
<span class="line">    strings <span class="token operator">=</span> strings<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>puncTable<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> strings</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建停用词" tabindex="-1"><a class="header-anchor" href="#创建停用词"><span>创建停用词</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">stopwordslist</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    stopwords <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">return</span> stopwords</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)),s("p",null,[n[1]||(n[1]=a("停用词下载链接：")),s("a",r,[n[0]||(n[0]=a("https://github.com/goto456/stopwords")),t(e)])]),n[5]||(n[5]=p(`<h3 id="分词" tabindex="-1"><a class="header-anchor" href="#分词"><span>分词</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">seg</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    seged <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>strings<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 删除头尾空白字符</span></span>
<span class="line">    stopwords <span class="token operator">=</span> stopwordslist<span class="token punctuation">(</span><span class="token string">&#39;./cn_stopwords.txt&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 这里加载停用词的路径</span></span>
<span class="line">    outstr <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    <span class="token keyword">for</span> word <span class="token keyword">in</span> seged<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> word <span class="token keyword">not</span> <span class="token keyword">in</span> stopwords<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> word <span class="token operator">!=</span> <span class="token string">&#39;\\t&#39;</span><span class="token punctuation">:</span></span>
<span class="line">                outstr <span class="token operator">+=</span> word</span>
<span class="line">                outstr <span class="token operator">+=</span> <span class="token string">&quot; &quot;</span></span>
<span class="line">    <span class="token keyword">return</span> outstr</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结巴分词" tabindex="-1"><a class="header-anchor" href="#结巴分词"><span>结巴分词</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">s <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>strings<span class="token punctuation">,</span>cut_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># text传入要分词文本</span></span>
<span class="line"><span class="token comment"># cut_all=True则整句逐词逐词分，False则会去掉前后重复的词</span></span>
<span class="line">ls <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>strings<span class="token punctuation">,</span>cut_all<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 传回分好词的列表</span></span>
<span class="line">s <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut_for_search<span class="token punctuation">(</span>strings<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 用于搜索引擎构建倒排索引的分词，粒度比较细</span></span>
<span class="line"><span class="token comment"># True/False选择是否选择HMM模型</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="制作词云" tabindex="-1"><a class="header-anchor" href="#制作词云"><span>制作词云</span></a></h3><h4 id="wordcloud如何将文本转化为词云" tabindex="-1"><a class="header-anchor" href="#wordcloud如何将文本转化为词云"><span>wordcloud如何将文本转化为词云</span></a></h4><ul><li>1.分隔：以空格分隔单词</li><li>2.统计：单词出现次数并过滤</li><li>3.字体：根据统计配置字号</li><li>4.布局：颜色环境尺寸</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 如果分词用的lcut：ls = jieba.lcut(strings)</span></span>
<span class="line"><span class="token comment"># 则还需要加一句：txt = &#39; &#39;.join(ls)，将其转为字符串</span></span>
<span class="line"></span>
<span class="line">w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span></span>
<span class="line">    width<span class="token operator">=</span><span class="token number">1600</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">900</span><span class="token punctuation">,</span></span>
<span class="line">    background_color<span class="token operator">=</span><span class="token string">&quot;white&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    font_path<span class="token operator">=</span><span class="token string">&quot;msyh.ttc&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token comment"># 配置参数</span></span>
<span class="line"><span class="token comment"># 其他可选参数</span></span>
<span class="line"><span class="token comment"># min_font_size、max_font_size:最小、最大字体字号</span></span>
<span class="line"><span class="token comment"># font_step:字体字号的步进间隔，默认为1</span></span>
<span class="line"><span class="token comment"># max_words:显示的最大单词数量，默认200</span></span>
<span class="line"><span class="token comment"># stop_words:词云的排除词列表</span></span>
<span class="line"><span class="token comment"># mask:指定词云聚集成的图形,默认为长方形，需要能读入图像的函数，如cv2.imread()、plt,imread()等等</span></span>
<span class="line"><span class="token comment"># wordcloud.ImageColorGenerator配合mask，将词云文字颜色与图像颜色对应</span></span>
<span class="line"><span class="token comment"># background_color:词云图片的背景颜色，默认为黑色</span></span>
<span class="line">w<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>txt<span class="token punctuation">)</span> <span class="token comment"># 生成词云文本</span></span>
<span class="line"><span class="token comment"># colors = wordcloud.ImageColorGenerator(cv2.imread(&#39;path&#39;))</span></span>
<span class="line"><span class="token comment"># w.recolor(color_func=colors)</span></span>
<span class="line">w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">&quot;wordcloud.png&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 输出词云文件</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改字体颜色" tabindex="-1"><a class="header-anchor" href="#修改字体颜色"><span>修改字体颜色</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment">#!/usr/bin/env python</span></span>
<span class="line"><span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">Colored by Group Example</span>
<span class="line">========================</span>
<span class="line"></span>
<span class="line">Generating a word cloud that assigns colors to words based on</span>
<span class="line">a predefined mapping from colors to words</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> <span class="token punctuation">(</span>WordCloud<span class="token punctuation">,</span> get_single_color_func<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SimpleGroupedColorFunc</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Create a color function object which assigns EXACT colors</span>
<span class="line">       to certain words based on the color to words mapping</span>
<span class="line"></span>
<span class="line">       Parameters</span>
<span class="line">       ----------</span>
<span class="line">       color_to_words : dict(str -&gt; list(str))</span>
<span class="line">         A dictionary that maps a color to the list of words.</span>
<span class="line"></span>
<span class="line">       default_color : str</span>
<span class="line">         Color that will be assigned to a word that&#39;s not a member</span>
<span class="line">         of any value from color_to_words.</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> color_to_words<span class="token punctuation">,</span> default_color<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>word_to_color <span class="token operator">=</span> <span class="token punctuation">{</span>word<span class="token punctuation">:</span> color</span>
<span class="line">                              <span class="token keyword">for</span> <span class="token punctuation">(</span>color<span class="token punctuation">,</span> words<span class="token punctuation">)</span> <span class="token keyword">in</span> color_to_words<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                              <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>default_color <span class="token operator">=</span> default_color</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>word_to_color<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span> self<span class="token punctuation">.</span>default_color<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">GroupedColorFunc</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Create a color function object which assigns DIFFERENT SHADES of</span>
<span class="line">       specified colors to certain words based on the color to words mapping.</span>
<span class="line"></span>
<span class="line">       Uses wordcloud.get_single_color_func</span>
<span class="line"></span>
<span class="line">       Parameters</span>
<span class="line">       ----------</span>
<span class="line">       color_to_words : dict(str -&gt; list(str))</span>
<span class="line">         A dictionary that maps a color to the list of words.</span>
<span class="line"></span>
<span class="line">       default_color : str</span>
<span class="line">         Color that will be assigned to a word that&#39;s not a member</span>
<span class="line">         of any value from color_to_words.</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> color_to_words<span class="token punctuation">,</span> default_color<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>color_func_to_words <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token punctuation">(</span>get_single_color_func<span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span>color<span class="token punctuation">,</span> words<span class="token punctuation">)</span> <span class="token keyword">in</span> color_to_words<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>default_color_func <span class="token operator">=</span> get_single_color_func<span class="token punctuation">(</span>default_color<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get_color_func</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;Returns a single_color_func associated with the word&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">            color_func <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span></span>
<span class="line">                color_func <span class="token keyword">for</span> <span class="token punctuation">(</span>color_func<span class="token punctuation">,</span> words<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>color_func_to_words</span>
<span class="line">                <span class="token keyword">if</span> word <span class="token keyword">in</span> words<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span></span>
<span class="line">            color_func <span class="token operator">=</span> self<span class="token punctuation">.</span>default_color_func</span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> color_func</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_color_func<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">wc <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>collocations<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>generate<span class="token punctuation">(</span>text<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 自定义所有单词的颜色</span></span>
<span class="line">color_to_words <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment"># words below will be colored with a green single color function</span></span>
<span class="line">    <span class="token string">&#39;#00ff00&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;beautiful&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;explicit&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;simple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sparse&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string">&#39;readability&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rules&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;practicality&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string">&#39;explicitly&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;now&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;easy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;obvious&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;better&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment"># will be colored with a red single color function</span></span>
<span class="line">    <span class="token string">&#39;red&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;ugly&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;implicit&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;complex&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;complicated&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nested&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&#39;dense&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;special&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;errors&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;silently&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ambiguity&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&#39;guess&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hard&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Words that are not in any of the color_to_words values</span></span>
<span class="line"><span class="token comment"># will be colored with a grey single color function</span></span>
<span class="line">default_color <span class="token operator">=</span> <span class="token string">&#39;grey&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create a color function with single tone</span></span>
<span class="line"><span class="token comment"># grouped_color_func = SimpleGroupedColorFunc(color_to_words, default_color)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create a color function with multiple tones</span></span>
<span class="line">grouped_color_func <span class="token operator">=</span> GroupedColorFunc<span class="token punctuation">(</span>color_to_words<span class="token punctuation">,</span> default_color<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Apply our color function</span></span>
<span class="line">wc<span class="token punctuation">.</span>recolor<span class="token punctuation">(</span>color_func<span class="token operator">=</span>grouped_color_func<span class="token punctuation">)</span></span>
<span class="line">w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">&quot;wordcloud.png&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),s("p",null,[n[3]||(n[3]=a("参考链接：")),s("a",d,[n[2]||(n[2]=a("https://zhuanlan.zhihu.com/p/27626809")),t(e)])])])}const b=l(u,[["render",k]]),g=JSON.parse('{"path":"/blogs/Python/wordcloud.html","title":"词云快速制作方法","lang":"en-US","frontmatter":{"title":"词云快速制作方法","date":"2022-09-10T00:00:00.000Z","tags":["Python"],"categories":["Lang"]},"headers":[{"level":2,"title":"如何快速制作一张词云","slug":"如何快速制作一张词云","link":"#如何快速制作一张词云","children":[{"level":3,"title":"库","slug":"库","link":"#库","children":[]},{"level":3,"title":"获取分词字符串","slug":"获取分词字符串","link":"#获取分词字符串","children":[]},{"level":3,"title":"去除常见标点","slug":"去除常见标点","link":"#去除常见标点","children":[]},{"level":3,"title":"创建停用词","slug":"创建停用词","link":"#创建停用词","children":[]},{"level":3,"title":"分词","slug":"分词","link":"#分词","children":[]},{"level":3,"title":"制作词云","slug":"制作词云","link":"#制作词云","children":[]}]}],"git":{"createdTime":1744420073000,"updatedTime":1744420073000,"contributors":[{"name":"NewLearner4396","email":"NewLearner4396@users.noreply.github.com","commits":1}]},"filePathRelative":"blogs/Python/wordcloud.md"}');export{b as comp,g as data};
