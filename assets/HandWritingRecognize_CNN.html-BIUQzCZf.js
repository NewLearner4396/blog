import{_ as e,c as l,e as i,a as s,b as p,d as t,r as c,o}from"./app-BSRiWrsC.js";const u={},r={href:"https://www.zybuluo.com/hanbingtao/note/485480",target:"_blank",rel:"noopener noreferrer"},k={href:"https://blog.csdn.net/qq_44961028/article/details/118074416",target:"_blank",rel:"noopener noreferrer"};function d(v,n){const a=c("ExternalLinkIcon");return o(),l("div",null,[n[2]||(n[2]=i(`<h2 id="基于cnn的手写数字识别" tabindex="-1"><a class="header-anchor" href="#基于cnn的手写数字识别"><span>基于CNN的手写数字识别</span></a></h2><h3 id="完整代码" tabindex="-1"><a class="header-anchor" href="#完整代码"><span>完整代码</span></a></h3><h4 id="cnn-py" tabindex="-1"><a class="header-anchor" href="#cnn-py"><span>CNN.py</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Conv</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> measure<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">        卷积初始化</span>
<span class="line"></span>
<span class="line">        :param measure: 卷积核的尺寸</span>
<span class="line">        :param num: 卷积核的个数</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>measure <span class="token operator">=</span> measure</span>
<span class="line">        self<span class="token punctuation">.</span>num <span class="token operator">=</span> num</span>
<span class="line">        self<span class="token punctuation">.</span><span class="token builtin">input</span> <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">        self<span class="token punctuation">.</span>last_input <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># 随机生成(num*measure*measure)的卷积核</span></span>
<span class="line">        self<span class="token punctuation">.</span>filters <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>num<span class="token punctuation">,</span> measure<span class="token punctuation">,</span> measure<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>measure <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># 为了保持卷积后的图像大小不变，需要在边缘padding（补0）</span></span>
<span class="line">        <span class="token comment"># 计算需要padding的大小</span></span>
<span class="line">        self<span class="token punctuation">.</span>edge <span class="token operator">=</span> measure <span class="token operator">//</span> <span class="token number">2</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">sliding</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">        重叠滑动，步进为1，得到需要卷积的部分</span>
<span class="line"></span>
<span class="line">        :param image: 输入卷积后的图像</span>
<span class="line">        :returns: iter_image: 要池化的局部图像 i, j: 局部图像左上角坐标</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span><span class="token builtin">input</span> <span class="token operator">=</span> image</span>
<span class="line">        h<span class="token punctuation">,</span> w <span class="token operator">=</span> image<span class="token punctuation">.</span>shape</span>
<span class="line"></span>
<span class="line">        padded_image <span class="token operator">=</span> np<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>edge<span class="token punctuation">,</span> self<span class="token punctuation">.</span>edge<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>edge<span class="token punctuation">,</span> self<span class="token punctuation">.</span>edge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                              <span class="token string">&#39;constant&#39;</span><span class="token punctuation">,</span> constant_values<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                iter_image <span class="token operator">=</span> padded_image<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> self<span class="token punctuation">.</span>measure<span class="token punctuation">)</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span><span class="token punctuation">(</span>j <span class="token operator">+</span> self<span class="token punctuation">.</span>measure<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">yield</span> iter_image<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j  <span class="token comment"># 返回需要卷积的图像和左上角坐标</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">conv</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_image<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">        对全幅图像进行卷积</span>
<span class="line"></span>
<span class="line">        :param input_image: 要卷积的图像</span>
<span class="line">        :return: output_image: 卷积完的图像</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>last_input <span class="token operator">=</span> input_image  <span class="token comment"># 保存一份输入图像，方便反馈时使用</span></span>
<span class="line">        h<span class="token punctuation">,</span> w <span class="token operator">=</span> input_image<span class="token punctuation">.</span>shape</span>
<span class="line"></span>
<span class="line">        output_image <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> w<span class="token punctuation">,</span> self<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出不同卷积核卷积后的特征图，大小为h*w*num</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># 卷积运算</span></span>
<span class="line">        <span class="token keyword">for</span> iter_image<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> self<span class="token punctuation">.</span>sliding<span class="token punctuation">(</span>input_image<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            output_image<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>iter_image <span class="token operator">*</span> self<span class="token punctuation">.</span>filters<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> output_image</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">feedback</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> out<span class="token punctuation">,</span> learn_rate<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line"></span>
<span class="line">        :param out:权重</span>
<span class="line">        :param learn_rate:学习率，梯度下降的步进</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        filters <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>filters<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> iter_image<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> self<span class="token punctuation">.</span>sliding<span class="token punctuation">(</span>self<span class="token punctuation">.</span>last_input<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token comment"># 利用反馈的权重修改卷积核</span></span>
<span class="line">                filters<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> out<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">]</span> <span class="token operator">*</span> iter_image</span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>filters <span class="token operator">-=</span> learn_rate <span class="token operator">*</span> filters</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Pooling</span><span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pool_size<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">        池化，给数据降维</span>
<span class="line"></span>
<span class="line">        :param pool_size: 池化的大小</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>size <span class="token operator">=</span> pool_size</span>
<span class="line">        self<span class="token punctuation">.</span>last_input <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">sliding</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">        不重叠滑动，返回要池化的局部图像</span>
<span class="line"></span>
<span class="line">        :param image: 输入卷积后的图像</span>
<span class="line">        :return: iter_image: 要池化的局部图像 i, j: 局部图像左上角坐标</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>last_input <span class="token operator">=</span> image</span>
<span class="line">        h <span class="token operator">=</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">//</span> self<span class="token punctuation">.</span>size</span>
<span class="line">        w <span class="token operator">=</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">//</span> self<span class="token punctuation">.</span>size</span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                iter_image <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">*</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">*</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                   <span class="token punctuation">(</span>j <span class="token operator">*</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span>j <span class="token operator">*</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">yield</span> iter_image<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">max_pool</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_image<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">        最大池化</span>
<span class="line"></span>
<span class="line">        :param input_image:卷积后的图像</span>
<span class="line">        :return:池化后的图像</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># 输出图像大小为原图像//池化大小</span></span>
<span class="line">        h <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>input_image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">//</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span></span>
<span class="line">        w <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>input_image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">//</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span></span>
<span class="line">        n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>input_image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        output_image <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> w<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> iter_image<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> self<span class="token punctuation">.</span>sliding<span class="token punctuation">(</span>input_image<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            output_image<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>amax<span class="token punctuation">(</span>iter_image<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> output_image</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">feedback</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> back_nodes<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line"></span>
<span class="line">        :param back_nodes:</span>
<span class="line">        :return:</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        input_nodes <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>last_input<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># 每个iter_image都是3*3*8的矩阵</span></span>
<span class="line">        <span class="token comment"># 修改max</span></span>
<span class="line">        <span class="token keyword">for</span> iter_image<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> self<span class="token punctuation">.</span>sliding<span class="token punctuation">(</span>self<span class="token punctuation">.</span>last_input<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            h<span class="token punctuation">,</span> w<span class="token punctuation">,</span> n <span class="token operator">=</span> iter_image<span class="token punctuation">.</span>shape</span>
<span class="line">            amax <span class="token operator">=</span> np<span class="token punctuation">.</span>amax<span class="token punctuation">(</span>iter_image<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment"># 遍历iter_image，将最大值像素改为梯度</span></span>
<span class="line">            <span class="token keyword">for</span> i2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">for</span> j2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                    <span class="token keyword">for</span> k2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                        <span class="token keyword">if</span> iter_image<span class="token punctuation">[</span>i2<span class="token punctuation">,</span> j2<span class="token punctuation">,</span> k2<span class="token punctuation">]</span> <span class="token operator">==</span> amax<span class="token punctuation">[</span>k2<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">                            input_nodes<span class="token punctuation">[</span>i <span class="token operator">*</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> i2<span class="token punctuation">,</span> j <span class="token operator">*</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> j2<span class="token punctuation">,</span> k2<span class="token punctuation">]</span> <span class="token operator">=</span> back_nodes<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k2<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> input_nodes</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Softmax</span><span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_size<span class="token punctuation">,</span> out_nodes<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line"></span>
<span class="line">        :param input_size:</span>
<span class="line">        :param out_nodes:</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>weights <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> out_nodes<span class="token punctuation">)</span> <span class="token operator">/</span> input_size</span>
<span class="line">        self<span class="token punctuation">.</span>output <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>out_nodes<span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>last_input <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">        self<span class="token punctuation">.</span>last_input_shape <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">        self<span class="token punctuation">.</span>last_totals <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">softmax</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_image<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line"></span>
<span class="line">        :param input_image:</span>
<span class="line">        :return:</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>last_input_shape <span class="token operator">=</span> input_image<span class="token punctuation">.</span>shape</span>
<span class="line">        input_image <span class="token operator">=</span> input_image<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 将数据转为一维</span></span>
<span class="line">        self<span class="token punctuation">.</span>last_input <span class="token operator">=</span> input_image</span>
<span class="line">        <span class="token comment"># length, nodes = self.weights.shape</span></span>
<span class="line"></span>
<span class="line">        totals <span class="token operator">=</span> input_image @ self<span class="token punctuation">.</span>weights <span class="token operator">+</span> self<span class="token punctuation">.</span>output</span>
<span class="line">        self<span class="token punctuation">.</span>last_totals <span class="token operator">=</span> totals</span>
<span class="line"></span>
<span class="line">        out <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>totals<span class="token punctuation">)</span></span>
<span class="line">        out <span class="token operator">=</span> out <span class="token operator">/</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 归一化</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> out</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">feedback</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> gradients<span class="token punctuation">,</span> learn_rate<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line"></span>
<span class="line">        :param gradients:</span>
<span class="line">        :param learn_rate:</span>
<span class="line">        :return:</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> i<span class="token punctuation">,</span> gradient <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>gradients<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">if</span> gradient <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">continue</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment"># 得到一群1和正确答案对应的非1值</span></span>
<span class="line">            exp_t <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>self<span class="token punctuation">.</span>last_totals<span class="token punctuation">)</span></span>
<span class="line">            exp_t_s <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>exp_t<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment"># 反馈的数值</span></span>
<span class="line">            out_back <span class="token operator">=</span> <span class="token operator">-</span>exp_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> exp_t <span class="token operator">/</span> <span class="token punctuation">(</span>exp_t_s <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">            out_back<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> exp_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>exp_t_s <span class="token operator">-</span> exp_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>exp_t_s <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment"># 反馈输值和概率做乘积，得到结果权重</span></span>
<span class="line">            out_back <span class="token operator">=</span> gradient <span class="token operator">*</span> out_back</span>
<span class="line"></span>
<span class="line">            <span class="token comment"># 输入与权重点乘，获得权重的偏置</span></span>
<span class="line">            weight_back <span class="token operator">=</span> self<span class="token punctuation">.</span>last_input<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span><span class="token punctuation">.</span>T @ out_back<span class="token punctuation">[</span>np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span></span>
<span class="line">            input_back <span class="token operator">=</span> self<span class="token punctuation">.</span>weights @ out_back</span>
<span class="line"></span>
<span class="line">            self<span class="token punctuation">.</span>weights <span class="token operator">-=</span> learn_rate <span class="token operator">*</span> weight_back</span>
<span class="line">            self<span class="token punctuation">.</span>output <span class="token operator">-=</span> learn_rate <span class="token operator">*</span> out_back</span>
<span class="line"></span>
<span class="line">        input_back <span class="token operator">=</span> input_back<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>self<span class="token punctuation">.</span>last_input_shape<span class="token punctuation">)</span>  <span class="token comment"># 将矩阵从1维转回3维</span></span>
<span class="line">        <span class="token keyword">return</span> input_back</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">CNN</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> conv_size<span class="token punctuation">,</span> pool_size<span class="token punctuation">,</span> image_size<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> classes<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line"></span>
<span class="line">        :param conv_size:</span>
<span class="line">        :param pool_size:</span>
<span class="line">        :param image_size:</span>
<span class="line">        :param channel:</span>
<span class="line">        :param classes:</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> Conv<span class="token punctuation">(</span>conv_size<span class="token punctuation">,</span> channel<span class="token punctuation">)</span></span>
<span class="line">        self<span class="token punctuation">.</span>pool <span class="token operator">=</span> Pooling<span class="token punctuation">(</span>pool_size<span class="token punctuation">)</span></span>
<span class="line">        h_s <span class="token operator">=</span> image_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">//</span> pool_size</span>
<span class="line">        w_s <span class="token operator">=</span> image_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">//</span> pool_size</span>
<span class="line">        self<span class="token punctuation">.</span>softmax <span class="token operator">=</span> Softmax<span class="token punctuation">(</span><span class="token punctuation">(</span>h_s <span class="token operator">*</span> w_s <span class="token operator">*</span> channel<span class="token punctuation">)</span><span class="token punctuation">,</span> classes<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">train_forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> images<span class="token punctuation">,</span> target<span class="token punctuation">,</span> wheel<span class="token punctuation">,</span> learn_rate<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line"></span>
<span class="line">        :param images:测试图像</span>
<span class="line">        :param target:识别目标</span>
<span class="line">        :param wheel:训练轮数</span>
<span class="line">        :param learn_rate:学习率</span>
<span class="line">        :return:loss:损失</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 记录损失</span></span>
<span class="line">        item <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 计次</span></span>
<span class="line">        plt<span class="token punctuation">.</span>ion<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 打开绘图窗口</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>wheel<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            item_loss <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 记录每轮的损失</span></span>
<span class="line">            <span class="token keyword">for</span> image <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>images<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token comment"># 数据正向传播</span></span>
<span class="line">                out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>images<span class="token punctuation">[</span>image<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                out <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>out<span class="token punctuation">)</span></span>
<span class="line">                out <span class="token operator">=</span> self<span class="token punctuation">.</span>softmax<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>out<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment"># 计算损失</span></span>
<span class="line">                item_loss <span class="token operator">+=</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>out<span class="token punctuation">[</span>target<span class="token punctuation">[</span>image<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment"># 反馈数据</span></span>
<span class="line">                gradient <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">                gradient<span class="token punctuation">[</span>target<span class="token punctuation">[</span>image<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">/</span> out<span class="token punctuation">[</span>target<span class="token punctuation">[</span>image<span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">                gradient <span class="token operator">=</span> self<span class="token punctuation">.</span>softmax<span class="token punctuation">.</span>feedback<span class="token punctuation">(</span>gradient<span class="token punctuation">,</span> learn_rate<span class="token punctuation">)</span></span>
<span class="line">                gradient <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>feedback<span class="token punctuation">(</span>gradient<span class="token punctuation">)</span></span>
<span class="line">                self<span class="token punctuation">.</span>conv<span class="token punctuation">.</span>feedback<span class="token punctuation">(</span>gradient<span class="token punctuation">,</span> learn_rate<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                item <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">                <span class="token keyword">if</span> item <span class="token operator">%</span> <span class="token number">200</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">                    <span class="token comment"># 绘制损失函数</span></span>
<span class="line">                    plt<span class="token punctuation">.</span>clf<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清除之前画的图</span></span>
<span class="line">                    loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item_loss <span class="token operator">/</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">                    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>loss<span class="token punctuation">)</span></span>
<span class="line">                    plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;process: %.4f loss: %.7f&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>item <span class="token operator">/</span> <span class="token punctuation">(</span>wheel <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>images<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item_loss <span class="token operator">/</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    item_loss <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">                    plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> loss</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">        正向传播测试</span>
<span class="line"></span>
<span class="line">        :param image:测试图像</span>
<span class="line">        :return:</span>
<span class="line">        &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>image<span class="token punctuation">)</span></span>
<span class="line">        out <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>out<span class="token punctuation">)</span></span>
<span class="line">        out <span class="token operator">=</span> self<span class="token punctuation">.</span>softmax<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>out<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> out<span class="token punctuation">,</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>out<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="main-py" tabindex="-1"><a class="header-anchor" href="#main-py"><span>main.py</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">from</span> CNN <span class="token keyword">import</span> CNN</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">read_data</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    data_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    data_list <span class="token operator">=</span> data_file<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    data_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    target <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        line_ <span class="token operator">=</span> data_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># csv文件每行转列表</span></span>
<span class="line"></span>
<span class="line">        nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">255</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> line_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">        nums <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        target<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>line_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    target <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>target<span class="token punctuation">)</span></span>
<span class="line">    data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;加载完成！&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> data<span class="token punctuation">,</span> target</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">demo <span class="token operator">=</span> CNN<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">demo_data<span class="token punctuation">,</span> demo_target <span class="token operator">=</span> read_data<span class="token punctuation">(</span><span class="token string">&quot;mnist_train.csv&quot;</span><span class="token punctuation">)</span></span>
<span class="line">demo<span class="token punctuation">.</span>train_forward<span class="token punctuation">(</span>demo_data<span class="token punctuation">,</span> demo_target<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 训练模型</span></span>
<span class="line">demo <span class="token operator">=</span> CNN<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">demo_data<span class="token punctuation">,</span> demo_target <span class="token operator">=</span> read_data<span class="token punctuation">(</span><span class="token string">&quot;mnist_train.csv&quot;</span><span class="token punctuation">)</span></span>
<span class="line">demo<span class="token punctuation">.</span>train_forward<span class="token punctuation">(</span>demo_data<span class="token punctuation">,</span> demo_target<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 测试模型</span></span>
<span class="line">data2<span class="token punctuation">,</span> target2 <span class="token operator">=</span> read_data<span class="token punctuation">(</span><span class="token string">&#39;mnist_test.csv&#39;</span><span class="token punctuation">)</span></span>
<span class="line">count <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">item_loss <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    out<span class="token punctuation">,</span> result <span class="token operator">=</span> demo<span class="token punctuation">.</span>test<span class="token punctuation">(</span>data2<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> result <span class="token operator">==</span> target2<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">        count <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    item_loss <span class="token operator">+=</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>out<span class="token punctuation">[</span>target2<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;准确率为：&quot;</span><span class="token punctuation">,</span> count <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;average_loss：&quot;</span><span class="token punctuation">,</span> item_loss <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h4>`,7)),s("p",null,[s("a",r,[n[0]||(n[0]=p("零基础入门深度学习(4) - 卷积神经网络")),t(a)])]),s("p",null,[s("a",k,[n[1]||(n[1]=p("基于CNN的手写数字识别")),t(a)])])])}const b=e(u,[["render",d]]),g=JSON.parse('{"path":"/blogs/Miscellaneous/HandWritingRecognize_CNN.html","title":"基于CNN的手写数字识别","lang":"en-US","frontmatter":{"title":"基于CNN的手写数字识别","date":"2022-9-20","tags":["CNN","DeepLearning"],"categories":["Miscellaneous"]},"headers":[{"level":2,"title":"基于CNN的手写数字识别","slug":"基于cnn的手写数字识别","link":"#基于cnn的手写数字识别","children":[{"level":3,"title":"完整代码","slug":"完整代码","link":"#完整代码","children":[]}]}],"git":{"createdTime":1744420073000,"updatedTime":1744420073000,"contributors":[{"name":"NewLearner4396","email":"NewLearner4396@users.noreply.github.com","commits":1}]},"filePathRelative":"blogs/Miscellaneous/HandWritingRecognize_CNN.md"}');export{b as comp,g as data};
