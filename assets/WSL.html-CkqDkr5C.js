import{_ as t,c as o,e as i,a as s,b as e,d as l,r as p,o as r}from"./app-BSRiWrsC.js";const d={},u={href:"https://learn.microsoft.com/zh-cn/windows/wsl/connect-usb",target:"_blank",rel:"noopener noreferrer"},c={href:"https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-2---check-requirements-for-running-wsl-2",target:"_blank",rel:"noopener noreferrer"},m={href:"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi",target:"_blank",rel:"noopener noreferrer"},b={href:"https://learn.microsoft.com/en-us/windows/wsl/install-manual#downloading-distributions",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/dyingsu/nolsp",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.intel.com/content/www/us/en/download/19344/intel-graphics-windows-dch-drivers.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.amd.com/en/support/kb/release-notes/rn-rad-win-wsl-support",target:"_blank",rel:"noopener noreferrer"},f={href:"https://developer.nvidia.com/cuda/wsl",target:"_blank",rel:"noopener noreferrer"},E={href:"https://blog.csdn.net/alfiy/article/details/126859106",target:"_blank",rel:"noopener noreferrer"},g={href:"https://learn.microsoft.com/zh-cn/windows/terminal/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zhuanlan.zhihu.com/p/272082726#:~:text=Windows%20Terminal%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97%201%20%E5%8D%95%E5%87%BB%E5%85%B6%E5%BC%80%E5%A7%8B%E8%8F%9C%E5%8D%95%E5%9B%BE%E6%A0%87%202%20%E5%9C%A8Powershell%E6%88%96%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6%E4%B8%8B%E8%BE%93%E5%85%A5%20wsl%20%E6%88%96,Terminal%3A%20Select%20Default%20Shell%20%EF%BC%8C%E7%84%B6%E5%90%8E%E9%80%89%E6%8B%A9%20WSL%20Bash%20%E3%80%82",target:"_blank",rel:"noopener noreferrer"},x={href:"https://blog.csdn.net/Jioho_chen/article/details/100624029",target:"_blank",rel:"noopener noreferrer"},L={href:"https://blog.csdn.net/dpl12/article/details/105484684",target:"_blank",rel:"noopener noreferrer"},W={href:"https://www.zhihu.com/question/387747506/answer/2579596278",target:"_blank",rel:"noopener noreferrer"},A={href:"https://blog.csdn.net/xushx_bigbear/article/details/12966625",target:"_blank",rel:"noopener noreferrer"},B={href:"https://blog.csdn.net/shihoongbo/article/details/122290472",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.1024sou.com/article/977402.html#:~:text=WSL2%20%E9%87%87%E7%94%A8%20Hyper-V%20%E7%9A%84%20Internal%20Virtual,Switch%EF%BC%8C%E8%BF%99%E4%B8%AA%E8%99%9A%E6%8B%9F%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%9C%AC%E8%BA%AB%E6%98%AF%E5%8F%AF%E4%BB%A5%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81%20IP%20%E5%9C%B0%E5%9D%80%E7%9A%84%EF%BC%8C%E4%BD%86%E6%98%AF%20WSL2%20%E5%8D%B4%E8%87%AA%E4%BD%9C%E8%81%AA%E6%98%8E%EF%BC%8C%E5%9C%A8%E6%AF%8F%E6%AC%A1%E5%85%A8%E6%96%B0%E5%90%AF%E5%8A%A8%E7%9A%84%E6%97%B6%E5%80%99%E5%B0%86%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E6%81%A2%E5%A4%8D%E6%88%90%20DHCP%EF%BC%8C%E8%BF%99%E5%B0%B1%E5%AF%BC%E8%87%B4WSL2%E6%AF%8F%E6%AC%A1%E5%85%A8%E6%96%B0%E5%90%AF%E5%8A%A8%E5%90%8E%E7%9A%84IP%E9%83%BD%E4%B8%8D%E5%9B%BA%E5%AE%9A%EF%BC%8C%E5%A6%82%E6%9E%9C%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AA%E5%9B%BA%E5%AE%9A%E7%9A%84IP%EF%BC%8C%E9%9C%80%E8%A6%81%E5%81%9A%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE%E3%80%82",target:"_blank",rel:"noopener noreferrer"},C={href:"https://blog.csdn.net/nick_young_qu/article/details/113709768",target:"_blank",rel:"noopener noreferrer"},D={href:"https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gpu-compute",target:"_blank",rel:"noopener noreferrer"},P={href:"https://learn.microsoft.com/zh-cn/windows/wsl/basic-commands",target:"_blank",rel:"noopener noreferrer"},y={href:"https://learn.microsoft.com/zh-cn/windows/wsl/install#upgrade-version-from-wsl-1-to-wsl-2",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.cnblogs.com/ittranslator/p/14128570.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://blog.csdn.net/weixin_45840825/article/details/127138564",target:"_blank",rel:"noopener noreferrer"},N={href:"https://blog.csdn.net/qq_43613793/article/details/119774825",target:"_blank",rel:"noopener noreferrer"},U={href:"https://learn.microsoft.com/zh-cn/windows/wsl/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://learn.microsoft.com/zh-cn/windows/wsl/setup/environment",target:"_blank",rel:"noopener noreferrer"};function T(z,n){const a=p("ExternalLinkIcon");return r(),o("div",null,[n[48]||(n[48]=i('<h2 id="windows-subsystem-for-linux——wsl2" tabindex="-1"><a class="header-anchor" href="#windows-subsystem-for-linux——wsl2"><span>Windows Subsystem for Linux——WSL2</span></a></h2><h3 id="前世今身" tabindex="-1"><a class="header-anchor" href="#前世今身"><span>前世今身</span></a></h3><p>微软开发WSL使开发人员能在Windows环境下运行Linux环境，而不会产生传统虚拟机或双系统设置的烦恼。原本WSL希望在Windows下解释Linux，但发现成本太高，难以维继🤔，选择了使用虚拟化直接调用Linux内核推出了WSL2。</p><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><p>在Windows窗口下运行Linux环境，可以直接使用Docker等，而不需要Win去转换，虽然类似虚拟机，但Win与Linux共享设备资源，动态调度，可以直接使用GPU进行机器学习等的加速，损耗比传统虚拟机小，且Linux可以直接访问Windows下的文件，但是WSL2的访问速度比WSL1的差了许多。</p>',5)),s("p",null,[n[1]||(n[1]=e("目前WSL2若需要直接访问USB设备，需要使用USBIPD-WIN工具提供支持，具体参阅")),s("a",u,[n[0]||(n[0]=e("连接USB设备")),l(a)]),n[2]||(n[2]=e("，且还不支持串行端口。"))]),n[49]||(n[49]=s("p",null,"目前在关闭WSL2实例前，WSL2不会自动将之前用的内存的缓存释放，若长时间运行容易耗尽Windows内存，而WSL1会在进程结束后直接释放，这个区别需要注意",-1)),n[50]||(n[50]=s("p",null,"WSL2作为hyper-v虚拟机运行，使用网络地址转换 (NAT) 服务作为其虚拟网络，而不是将其桥接到主机网络接口卡 (NIC)，在重启时将更改IP地址，若需固定IP则需要设置替代方法。",-1)),n[51]||(n[51]=s("h3",{id:"安装条件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#安装条件"},[s("span",null,"安装条件")])],-1)),n[52]||(n[52]=s("ol",null,[s("li",null,[e("win10系统版本为 Version 1903 or later, with Build 18362 or later，终端中输入"),s("code",null,"ver"),e("查看。win11直接支持。")]),s("li",null,"计算机支持支持 Hyper-V 虚拟化")],-1)),s("p",null,[s("a",c,[n[3]||(n[3]=e("检查安装WSL2条件")),l(a)])]),n[53]||(n[53]=s("h3",{id:"启用",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#启用"},[s("span",null,"启用")])],-1)),n[54]||(n[54]=s("p",null,[s("strong",null,"以下命令都在管理员身份运行！")],-1)),s("ol",null,[n[19]||(n[19]=s("li",null,[s("p",null,[e("启用WSL "),s("code",null,"dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart")])],-1)),n[20]||(n[20]=s("li",null,[s("p",null,[e("启用“虚拟机平台” "),s("code",null,"dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart")]),s("p",null,[e("或是手动启用，win+R 输入 appwiz.cpl，打开启用或关闭 Windows 功能 启用以下三个功能： "),s("img",{src:"http://imagebed.krins.cloud/api/image/X6422F0R.png",alt:"启用wsl"})])],-1)),s("li",null,[s("p",null,[n[5]||(n[5]=e("设置默认使用WSL2 下载WSL2内核更新包")),s("a",m,[n[4]||(n[4]=e("适用于 x64 计算机的 WSL2 Linux 内核更新包")),l(a)]),n[6]||(n[6]=e("，以管理员身份运行 之后在终端中输入 ")),n[7]||(n[7]=s("code",null,"wsl --set-default-version 2",-1))])]),s("li",null,[s("p",null,[n[9]||(n[9]=e("安装一个Linux发行版 为了不将Linux系统安装在C盘，需要麻烦一点，手动下载安装包进行安装 在官网中下载Linux发行版：")),s("a",b,[n[8]||(n[8]=e("Linux发行版")),l(a)])]),n[10]||(n[10]=i("<p>以管理员身份运行终端，输入<code>netsh winsock reset</code>，之后不要重启，继续往下</p><p>将安装包放在想安装Linux的路径，后缀改为<code>.zip</code>，解压后若无<code>Ubuntu.exe</code>，则将<code>Ubuntu_2204.0.10.0_x64.appx</code>后缀再次修改为<code>.zip</code>解压运行<code>Ubuntu.exe</code>，否则直接运行<code>Ubuntu.exe</code></p><p>等待一会，安装窗口会要求输入用户名和密码，输入完毕则安装完成</p>",3))]),s("li",null,[s("p",null,[n[12]||(n[12]=e("避免使用WSL2时出现")),n[13]||(n[13]=s("code",null,"参考的对象类型不支持尝试",-1)),n[14]||(n[14]=e(" 下载")),s("a",v,[n[11]||(n[11]=e("NoLsp.exe")),l(a)]),n[15]||(n[15]=e("，解压后放置在")),n[16]||(n[16]=s("code",null,"C:\\windows\\system32",-1)),n[17]||(n[17]=e("文件夹中，以管理员身份运行终端输入")),n[18]||(n[18]=s("code",null,"NoLsp.exe C:\\windows\\system32\\wsl.exe",-1))])])]),n[55]||(n[55]=s("h3",{id:"图形界面",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#图形界面"},[s("span",null,"图形界面")])],-1)),n[56]||(n[56]=s("p",null,"Win11 22000或更高版本已支持WSL的GUI😏",-1)),n[57]||(n[57]=s("p",null,"安装与显卡匹配的驱动：",-1)),s("ul",null,[s("li",null,[s("a",w,[n[21]||(n[21]=e("适用于 WSL 的 Intel GPU 驱动程序")),l(a)])]),s("li",null,[s("a",k,[n[22]||(n[22]=e("适用于 WSL 的 AMD GPU 驱动程序")),l(a)])]),s("li",null,[s("a",f,[n[23]||(n[23]=e("适用于 WSL 的 NVIDIA GPU 驱动程序")),l(a)])])]),n[58]||(n[58]=i(`<p>更新WSL后重启即可使用图形化界面了 <code>wsl --update</code></p><p>若win10想使用图形化界面可以通过远程桌面曲线救国😆</p><p>在wsl环境下输入</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 安装远程桌面协议xrdp与轻量级桌面xfce</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> upgrade</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> xrdp</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> xfce4 xfce4-goodies</span>
<span class="line"><span class="token comment"># 编辑xrdp配置文件</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/xrdp/xrdp.ini</span>
<span class="line"><span class="token comment">##修改以下参数后保存</span></span>
<span class="line"><span class="token assign-left variable">max_bpp</span><span class="token operator">=</span><span class="token number">128</span></span>
<span class="line"><span class="token assign-left variable">xserverbpp</span><span class="token operator">=</span><span class="token number">128</span> <span class="token comment"># 这个原本是注释着的，不改也行</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#在bash下直接输入</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token builtin class-name">echo</span> xfce4-session <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> ~/.xsession</span>
<span class="line"></span>
<span class="line"><span class="token comment">#编辑/etc/xrdp/startwm.sh文件</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/xrdp/startwm.sh</span>
<span class="line"><span class="token comment">##注释掉最后两行并添加一句startxfce4，然后保存</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次要使用桌面时</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 开启远程桌面</span></span>
<span class="line"><span class="token function">sudo</span> /etc/init.d/xrdp start</span>
<span class="line"><span class="token comment"># 确定ip</span></span>
<span class="line"><span class="token function">ip</span> a</span>
<span class="line"><span class="token comment">## 找到eth0的inet</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://imagebed.krins.cloud/api/image/TBH4H480.png" alt="查找ip"></p><p>win+R 输入mstsc打开微软的远程桌面连接工具 输入上面的ip <img src="http://imagebed.krins.cloud/api/image/000X0VPN.png" alt="输入ip"> 输入用户名密码连接 <img src="http://imagebed.krins.cloud/api/image/FJ6P6RFJ.png" alt="连接远程桌面"></p>`,8)),s("p",null,[n[25]||(n[25]=e("喜欢折腾可以美化桌面教程：")),s("a",E,[n[24]||(n[24]=e("美化你的Xfce桌面")),l(a)])]),n[59]||(n[59]=s("h3",{id:"windows-terminal",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#windows-terminal"},[s("span",null,"Windows Terminal")])],-1)),s("p",null,[s("a",g,[n[26]||(n[26]=e("什么是 Windows 终端？")),l(a)])]),s("p",null,[s("a",h,[n[27]||(n[27]=e("Windows Terminal完整指南")),l(a)])]),s("p",null,[s("a",x,[n[28]||(n[28]=e("美化 Windows Terminal(iTerm2-Color-Schemes)")),l(a)])]),n[60]||(n[60]=i(`<h3 id="固定ip" tabindex="-1"><a class="header-anchor" href="#固定ip"><span>固定ip</span></a></h3><p>因为WSL2每次启动都要虚拟化一张网卡，所以ip不会固定，需要其他的方法固定ip方便登录</p><p>我设置的ip为 Windows端静态IP 192.168.99.1 WSL Linux端静态IP 192.168.99.2 可按照个人需求进行设定</p><p>在powershell中输入<code>vim $profile</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token variable">$getIP</span> <span class="token operator">=</span> netsh.exe interface <span class="token function">ip</span> show addresses <span class="token string">&quot;vEthernet (WSL)&quot;</span> <span class="token operator">|</span> findstr.exe /C:<span class="token string">&quot;192.168.99.1&quot;</span></span>
<span class="line">if<span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$getIP</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    netsh interface <span class="token function">ip</span> <span class="token function">add</span> address <span class="token string">&quot;vEthernet (WSL)&quot;</span> <span class="token assign-left variable">address</span><span class="token operator">=</span><span class="token number">192.168</span>.99.1/24</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刚开机打开powershell时会显示<code>文件名、目录名或卷标语法不正确。</code> 因为wsl未启动，还未给其分配虚拟网卡，启动wsl后shell会自动给&quot;vEthernet (WSL)&quot;添加ip地址。 所以不用担心这个报错。</p><p>为避免wsl每次启动生成的ip将我们设置的ip覆盖掉，停用其服务</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 终端中输入</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/wsl.conf</span>
<span class="line"><span class="token comment"># 在文件内输入以下内容</span></span>
<span class="line"><span class="token punctuation">[</span>network<span class="token punctuation">]</span></span>
<span class="line">generateResolvConf <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token comment"># 保存后退出</span></span>
<span class="line"><span class="token comment"># 将已经生成的ip配置文件删除</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> /etc/resolv.conf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个脚本文件<code>sudo vim ~/Public/static-ip.sh</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"><span class="token comment"># ip设置为192.168.99.2</span></span>
<span class="line"><span class="token function">ip</span> addr show eth0 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;192.168.99.2/24&quot;</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> /dev/null</span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">  <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">192.168</span>.99.2/24 broadcast <span class="token number">192.168</span>.99.255 dev eth0 label eth0:1</span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为保证有运行权限终端输入<code>sudo chmod 777 ~/Public/static-ip.sh</code></p>`,11)),s("p",null,[n[30]||(n[30]=e("因为Ubuntu默认的sh是连接到dash的，为了避免不能运行bash脚本，将dash禁用 ")),n[31]||(n[31]=s("code",null,"sudo dpkg-reconfigure dash",-1)),n[32]||(n[32]=e(" 选择")),n[33]||(n[33]=s("code",null,"no",-1)),n[34]||(n[34]=e(" 参考:")),s("a",L,[n[29]||(n[29]=e("解决Linux下编译.sh文件报错 “[: unexpected operator]”")),l(a)])]),n[61]||(n[61]=i(`<p>之后在<code>~/.bashrc</code>文件中添加使用该脚本的命令，就可以每次加载shell都启动一遍脚本</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 编辑配置文件</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">vim</span> ~/.bashrc</span>
<span class="line"><span class="token comment"># 在文件末尾添加以下部分</span></span>
<span class="line"><span class="token comment">## 如果ip未修改的话运行脚本进行修改并顺便启动远程桌面</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">hostname</span> <span class="token parameter variable">-I</span><span class="token variable">\`</span></span> <span class="token operator">!=</span> <span class="token string">&quot;192.168.99.2&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    <span class="token builtin class-name">echo</span> Ubuntu <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token parameter variable">-S</span> <span class="token function">sh</span> ~/Public/static-ip.sh</span>
<span class="line">    <span class="token function">sudo</span> /etc/init.d/xrdp start</span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法<strong>会将你的用户密码暴露在文件中</strong>，有些危险，但我目前暂时没有更好的解决办法，又不想直接进入就是root用户。以后有更好的办法再更新。</p><p><img src="http://imagebed.krins.cloud/api/image/ZJ84JFFT.png" alt="添加网络互通"></p><ul><li>新建防火墙入站规则 <ul><li>打开控制面板\\系统和安全\\Windows Defender 防火墙</li><li>点击入站规则-&gt;新建规则</li><li>规则类型：自定义</li><li>程序：所有程序</li><li>协议和端口：默认即可</li><li>作用域： <ul><li>本地ip处选择“任何IP地址”</li><li>远程ip处选择“下列IP地址”，并将wsl2的IP添加进去。（请根据自己wsl2的ip进行计算，我这里添加了172.22.176.0/20）（掩码一般是20位）</li></ul></li><li>操作：允许连接</li><li>配置文件：三个全选</li><li>名称描述：请自定义 注意：这一步完成后，从wsl2 ping主机的ip应该可以ping通了。 即<code>ping 192.168.99.1</code> 这个<code>192.168.99.1</code>是之前设置的Windows端静态IP</li></ul></li></ul><p>将Windows代理软件的<code>允许局域网</code>选项启用，在Linux设置代理 <code>export ALL_PROXY=&quot;http://192.168.99.1:7890&quot;</code>注意端口号要根据代理软件进行设置 就可以通过Windows进行代理啦🤩 之后要git之类的就能很方便</p>`,6)),s("p",null,[s("a",W,[n[35]||(n[35]=e("wsl2能否固定ip地址?")),l(a)])]),s("p",null,[s("a",A,[n[36]||(n[36]=e("用 echo 管道命令给sudo自动输入密码")),l(a)])]),s("p",null,[s("a",B,[n[37]||(n[37]=e("Linux默认以root或管理员权限启动程序的三种方式")),l(a)])]),s("p",null,[s("a",S,[n[38]||(n[38]=e("WSL2-CentOS7固定IP")),l(a)])]),s("p",null,[s("a",C,[n[39]||(n[39]=e("wsl2配置使用windows网络代理")),l(a)])]),n[62]||(n[62]=s("h3",{id:"使用cuda",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#使用cuda"},[s("span",null,"使用CUDA")])],-1)),s("p",null,[s("a",D,[n[40]||(n[40]=e("官方教程-GPU加速")),l(a)])]),n[63]||(n[63]=s("h3",{id:"wsl命令",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#wsl命令"},[s("span",null,"WSL命令")])],-1)),n[64]||(n[64]=s("p",null,"可列出已安装的 Linux 发行版，并通过在 PowerShell 或 Windows 命令提示符中输入以下命令来检查每个发行版的 WSL 版本：wsl -l -v。",-1)),n[65]||(n[65]=s("p",null,"要在安装新的 Linux 发行版时将默认版本设置为 WSL 1 或 WSL 2，请使用命令 wsl --set-default-version <Version#>，将 <Version#> 替换为 1 或 2。",-1)),n[66]||(n[66]=s("p",null,"要设置与 wsl 命令一起使用的默认 Linux 发行版，请输入 wsl -s <DistributionName> 或 wsl --setdefault <DistributionName>，将 <DistributionName> 替换为要使用的 Linux 发行版的名称。 例如，从 PowerShell/CMD 输入 wsl -s Debian，将默认发行版设置为 Debian",-1)),n[67]||(n[67]=s("p",null,"要在 PowerShell 或 Windows 命令提示符下运行特定的 WSL 发行版而不更改默认发行版，请使用命令 wsl -d <DistributionName>，将 <DistributionName> 替换为要使用的发行版的名称。",-1)),n[68]||(n[68]=s("p",null,"wsl --set-version <DistributionName> version(1/2)命令可用于从 WSL 2 降级到 WSL 1，或将以前安装的 Linux 发行版从 WSL 1 更新到 WSL 2。",-1)),n[69]||(n[69]=s("p",null,"wsl --shutdown 命令用于将关闭wsl服务，释放其内存缓存。普通的exit只是注销，要过几分钟系统才会关闭其服务。",-1)),s("p",null,[s("a",P,[n[41]||(n[41]=e("WSL 的基本命令")),l(a)])]),s("p",null,[s("a",y,[n[42]||(n[42]=e("安装WSL")),l(a)])]),n[70]||(n[70]=s("p",null,"参考链接：",-1)),s("ol",null,[s("li",null,[s("a",F,[n[43]||(n[43]=e("如何在Windows 10上安装WSL2")),l(a)])]),s("li",null,[s("a",I,[n[44]||(n[44]=e("win11 安装 WSL2 在非 C 盘及配置（图形界面+代理）")),l(a)])]),s("li",null,[s("a",N,[n[45]||(n[45]=e("Win10通过wsl2使用Ubuntu以及GUI的安装")),l(a)])]),s("li",null,[s("a",U,[n[46]||(n[46]=e("官方文档")),l(a)])]),s("li",null,[s("a",q,[n[47]||(n[47]=e("WSL使用官方教程")),l(a)])])])])}const G=t(d,[["render",T]]),R=JSON.parse('{"path":"/blogs/Config/WSL.html","title":"Windows内运行Linux-WSL2","lang":"en-US","frontmatter":{"title":"Windows内运行Linux-WSL2","date":"2022-11-22T00:00:00.000Z","tags":["Linux"],"categories":["Config"]},"headers":[{"level":2,"title":"Windows Subsystem for Linux——WSL2","slug":"windows-subsystem-for-linux——wsl2","link":"#windows-subsystem-for-linux——wsl2","children":[{"level":3,"title":"前世今身","slug":"前世今身","link":"#前世今身","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"安装条件","slug":"安装条件","link":"#安装条件","children":[]},{"level":3,"title":"启用","slug":"启用","link":"#启用","children":[]},{"level":3,"title":"图形界面","slug":"图形界面","link":"#图形界面","children":[]},{"level":3,"title":"Windows Terminal","slug":"windows-terminal","link":"#windows-terminal","children":[]},{"level":3,"title":"固定ip","slug":"固定ip","link":"#固定ip","children":[]},{"level":3,"title":"使用CUDA","slug":"使用cuda","link":"#使用cuda","children":[]},{"level":3,"title":"WSL命令","slug":"wsl命令","link":"#wsl命令","children":[]}]}],"git":{"createdTime":1744420073000,"updatedTime":1744420073000,"contributors":[{"name":"NewLearner4396","email":"NewLearner4396@users.noreply.github.com","commits":1}]},"filePathRelative":"blogs/Config/WSL.md"}');export{G as comp,R as data};
