import{_ as p,c as o,e as a,a as e,b as s,d as i,r as d,o as t}from"./app-BSRiWrsC.js";const c={},r={href:"https://mirrors.huaweicloud.com/python/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.oracle.com/java/technologies/downloads/#jdk18-windows",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/ericsonj/verilog-format/blob/master/bin/verilog-format-WIN.zip",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/universal-ctags/ctags-win32/tags",target:"_blank",rel:"noopener noreferrer"},g={href:"http://bleyer.org/icarus/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://iverilog.fandom.com/wiki/User_Guide",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.msys2.org/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/qq_39498701/article/details/84668833",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zhuanlan.zhihu.com/p/338497672",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.cnblogs.com/whik/p/11980103.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://zhuanlan.zhihu.com/p/344993954",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/fangfanglovezhou/article/details/124987987",target:"_blank",rel:"noopener noreferrer"};function w(C,n){const l=d("ExternalLinkIcon");return t(),o("div",null,[n[55]||(n[55]=a('<h2 id="配置vscode-愉快编写verilog小工程" tabindex="-1"><a class="header-anchor" href="#配置vscode-愉快编写verilog小工程"><span>配置VSCode，愉快编写Verilog小工程</span></a></h2><p>[TOC]</p><h3 id="零、写在开头🧐" tabindex="-1"><a class="header-anchor" href="#零、写在开头🧐"><span>零、写在开头🧐</span></a></h3><p>VSCode是一个用着十分舒心的编辑器，搭配上各种插件，可以帮助我们跳过许多繁琐的操作。之前为了避开vivado难用的编辑器，配置我的VSCode折腾了好久，踩了不少坑。于是整理此文档供后人使用。其中部分资源下载时需要代理，请提前准备，或自行寻找其他下载链接，不便之处还请原谅。</p><h3 id="一、用vscode写verilog的原因🤣" tabindex="-1"><a class="header-anchor" href="#一、用vscode写verilog的原因🤣"><span>一、用VSCode写Verilog的原因🤣</span></a></h3><ol><li>VSCode打开迅速，比起<code>Vivado</code>、<code>Quartus</code>等IDE，简单查看或修改文件要方便的多；</li><li>有时不需要大费周章建立工程，<code>iVerilog+GtkWave</code>可以轻量化进行波形仿真，用<code>yosys</code>可以进行RTL仿真；</li><li><code>Vivado</code>、<code>Quartus</code>的编辑器没VSCode好用，而且VSCode有很多很方便的插件可以用。</li></ol><h3 id="二、配置所需的vscode插件😉" tabindex="-1"><a class="header-anchor" href="#二、配置所需的vscode插件😉"><span>二、配置所需的VSCode插件😉</span></a></h3><p><code>以下插件在VSCode插件市场可直接安装，按Ctrl+Shift+X可直接呼出，搜Verilog即可看到以下三个插件</code></p>',8)),e("ol",null,[n[22]||(n[22]=e("li",null,[e("p",null,"Verilog-HDL/SystemVerilog/Bluespec SystemVerilog"),e("p",null,"这个插件可以实现语法高亮、自动补齐、列出端口，配合iVerilog可以实现查找语法错误（只能查找语法错误，逻辑错误还需要自己写的时候细心从而避免🙃）"),e("p",null,[e("img",{src:"http://imagebed.krins.cloud/api/image/R2X0L20N.png#pic_center",alt:"Verilog-HDL/SystemVerilog/Bluespec SystemVerilog"})])],-1)),e("li",null,[n[3]||(n[3]=e("p",null,"Verilog_Testbench",-1)),n[4]||(n[4]=e("p",null,"自动帮助例化和写Testbench的插件，十分好用，很省心。",-1)),n[5]||(n[5]=e("p",null,[e("img",{src:"http://imagebed.krins.cloud/api/image/0Z4T4VD8.png#pic_center",alt:"Verilog_Testbench"})],-1)),n[6]||(n[6]=e("p",null,[s("这个插件依赖chardet库，需要Python，请提前下载好Python并将其加入环境变量（在安装时有"),e("code",null,"add Python to PATH"),s("这个选项直接勾上就好）")],-1)),e("p",null,[n[1]||(n[1]=s("Python下载地址：")),e("a",r,[n[0]||(n[0]=s("https://mirrors.huaweicloud.com/python/")),i(l)]),n[2]||(n[2]=s("（下载3.7以上版本就好）"))]),n[7]||(n[7]=a(`<p>安装好Python后在cmd（命令行）中写下<code>python --version</code>，能正确显示安装版本号即为安装正常。</p><p>如果命令行出现<code>‘python’不是内部或外部命令</code>,则说明<code>python.exe</code>的路径没有加入到环境变量，我们再手动添加一下。</p><p>首先我们要检查一下python是否成功安装：开始菜单中有python相关程序即为成功。</p><p><img src="http://imagebed.krins.cloud/api/image/644B2H2V.png" alt="Python相关程序"></p><p>点击这个黑色的编辑器，分别输入<code>import sys</code>,<code>sys.path</code>,即可找到Python安装路径（一般倒数第二个就是要找的路径），复制一下。</p><p><img src="http://imagebed.krins.cloud/api/image/BX0D602L.png" alt="Python安装路径"></p><p>按<code>Win+s</code>呼出系统搜索，搜索“系统变量”，打开。</p><p><img src="http://imagebed.krins.cloud/api/image/NH82R26Z.png" alt="搜索系统变量"></p><p>选择环境变量。</p><p>任选一个<code>Path</code>,双击，新建，粘贴上刚复制的路径，注意把每个双斜线删成单斜线。</p><p><img src="http://imagebed.krins.cloud/api/image/40RX0X0N.png" alt="新增系统变量"></p><p>之后在cmd中输入<code>pip install chardet</code>，安装chardet。</p><p>如果下载过慢或出错，可以使用国内镜像站下载，使用命令如下：</p><p><code>pip install chardet -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p>如若清华这个的镜像站挂了，可以试试以下几个镜像站</p><p><code>http://mirrors.aliyun.com/pypi/simple/</code></p><p><code>https://pypi.mirrors.ustc.edu.cn/simple/</code></p><p><code>http://pypi.douban.com/simple/</code></p><p>使用<code>pip list</code>这个命令可以查看已安装的库，输出列表中有chardet即可。</p><p>因为<code>Verilog_Testbench</code>这个插件是将生成的testbench输出在VSCode的命令行内，还需要自己手动生成文件并把它复制过去，有点麻烦，所以我们可以写一个脚本，每次使用这个插件的时候就调用它。</p><p>具体步骤如下：</p><ol><li>用管理员身份打开PowerShell；</li><li>分别输入<code>echo $profile</code>，<code>code $profile</code></li><li>输入</li></ol><div class="language-Bash line-numbers-mode" data-highlighter="prismjs" data-ext="Bash" data-title="Bash"><pre><code><span class="line">function createtb_function{</span>
<span class="line"> param(</span>
<span class="line">     [Parameter(ValueFromPipeline=$true)]</span>
<span class="line">     $InputObject</span>
<span class="line"> )</span>
<span class="line"> $FileName = $InputObject</span>
<span class="line"> $tbFileName = &quot;tb_&quot; + $FileName.split(&quot;\\&quot;)[-1]</span>
<span class="line"> echo $tbFileName</span>
<span class="line"> python $env:TestBenchPath $FileName &gt;&gt; $tbFileName}</span>
<span class="line"></span>
<span class="line">set-alias ll Get-ChildItemColor  </span>
<span class="line"></span>
<span class="line">$env:TestBenchPath=&quot;C:\\Users\\22306\\.vscode\\extensions\\truecrab.verilog-testbench-instance-0.0.5\\out\\vTbgenerator.py&quot;</span>
<span class="line"></span>
<span class="line">set-alias createtb createtb_function</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意要把<code>$env:TestBenchPath=&quot;C:\\Users\\22306\\.vscode\\extensions\\truecrab.verilog-testbench-instance-0.0.5\\out\\vTbgenerator.py&quot;</code>改成自己的路径，一般把<code>22306</code>改成自己的用户名就好了。</p><p>还有一件事，Windows系统下默认是不允许用户使用自己写的没有数字签名的脚本的，所以我们还要多一步。</p><p>用管理员身份打开Powershell，输入<code>set-executionpolicy remotesigned</code>，后按<code>Y</code>，即可成功设置。</p><p>可以用<code>get-executionpolicy</code>命令查看当前策略，如果显示<code>RemoteSigned</code>，就代表设置成功了。</p><p>以上我们就把<code>Verilog_Testbench</code>这个插件配置好了。</p><p>写完一个.v文件想生成它的testbench的话，在终端（按Ctrl+~可呼出）输入createtb xxx.v(xxx为你的文件名)就可以看到在同目录下新建了一个tb_xx.v文件，这就是自动生成的Testbench。该插件会自动生成时钟并例化好模块，自己再按需求修改一下就可以直接仿真啦。</p><p>但要注意它的默认编码不是<code>UTF_8</code>，仿真时会出错，要在VSCode右下角修改编码。点击右下角的当前编码，选择<code>通过编码重新保存</code>，选择<code>UTF_8</code>（推荐）或者<code>gbk</code>。</p><p><img src="http://imagebed.krins.cloud/api/image/08T028P0.png" alt="修改编码并保存"></p><p>按<code>F1</code>或<code>Ctrl+Shift+P</code>，调出VSCode命令行，输入<code>Instance</code>，该插件可以自动帮你例化模块，例化的思路和生成Testbench一样，虽然输出仍然在终端里，但用起来还是会觉得方便不少。</p><p><img src="http://imagebed.krins.cloud/api/image/0NP8PL4F.png" alt="输入Instance"></p><p><img src="http://imagebed.krins.cloud/api/image/4FFB8800.png" alt="例化效果"></p>`,34))]),e("li",null,[n[18]||(n[18]=e("p",null,"Verilog Format",-1)),n[19]||(n[19]=e("p",null,"快速将代码格式化，习惯自己排版的可以不用（可选）😊。",-1)),n[20]||(n[20]=e("p",null,[e("img",{src:"http://imagebed.krins.cloud/api/image/VH4ZJHX2.png#pic_center",alt:"Verilog Format"})],-1)),e("ol",null,[e("li",null,[n[10]||(n[10]=e("p",null,"安装JDK",-1)),n[11]||(n[11]=e("p",null,"该插件依赖于Java，所以我们需要提前安装。",-1)),e("p",null,[n[9]||(n[9]=s("JDK下载地址：")),e("a",u,[n[8]||(n[8]=s("https://www.oracle.com/java/technologies/downloads/#jdk18-windows")),i(l)])]),n[12]||(n[12]=a('<p>滑到下面选择<code>x64 installer</code>进行下载</p><p><img src="http://imagebed.krins.cloud/api/image/2086DLLX.png" alt="下载x64 installer"></p><p>接着是配置Java的环境变量，有四个需要配置。</p><ol><li><p>新建系统变量，变量名: <code>JAVA_TOOL_OPTIONS</code>，变量值：<code>-Dfile.encoding=UTF-8</code>。这一步设置JDK默认编码为<code>UTF-8</code>，避免将中文注释格式化为乱码。但亲测会将中文注释最后一个字格式化为奇怪字符，所以建议写了中文注释就不要用这个格式化了，或者不写中文注释。</p></li><li><p>新建系统变量，变量名为：<code>JAVA_HOME</code>，变量值为：<code>安装时jdk文件夹所在路径</code>。这一步为添加其他路径做准备。</p></li><li><p>新建系统变量，变量名为：<code>classpath</code> ，变量值为：<code>.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\tools.jar</code>。注意变量值最前面有个<code>.</code>。</p></li><li><p>修改变量<code>PATH</code>，新增两个变量值<code>%JAVA_HOME%\\bin</code>，<code>%JAVA_HOME%\\jre\\bin</code>。</p></li></ol><p>都添加完后打开cmd，分别输入<code>java</code>，<code>javac</code>，都有反应代表安装成功。</p>',5))]),e("li",null,[e("p",null,[n[14]||(n[14]=s("在")),e("a",v,[n[13]||(n[13]=s("github")),i(l)]),n[15]||(n[15]=s("上下载该插件对应的程序和配置文件。"))]),n[16]||(n[16]=e("p",null,[e("img",{src:"http://imagebed.krins.cloud/api/image/L6X2JZ2X.png",alt:"下载对应zip"})],-1))]),n[17]||(n[17]=a('<li><p>解压后将对应路径填写到插件设置中。</p><p><img src="http://imagebed.krins.cloud/api/image/8F2880BP.png" alt="填写程序与配置文件路径"></p><p>由于作者失误，为了启用该配置文件我们还需多一步，在我们的VSCode配置文件<code>settings.json</code>中的某一行的<code>verilog-format.setting</code>的后面加一个<code>s</code>。加完之后这一行会变灰，提示<code>未知的配置设置</code>，但没关系，这样反而能正常使用。</p><p><img src="http://imagebed.krins.cloud/api/image/L0L86T80.png" alt="在verilog-format.setting后添加s"></p></li><li><p>修改配置文件</p><p>插件说明页有具体设置说明，根据自己喜爱配置参数即可。</p><p>我的设置如下：</p><p><img src="http://imagebed.krins.cloud/api/image/HJ6FH0NB.png#pic_center" alt="VerilogFormat个人配置"></p></li>',2))]),n[21]||(n[21]=e("p",null,[s("之后就可以在Verilog文件中按"),e("code",null,"Alt+Shift+F"),s("，或"),e("code",null,"右键-格式化文档"),s("对文档进行格式化。")],-1))])]),n[56]||(n[56]=e("p",null,[e("code",null,"以下组件需要额外下载和安装")],-1)),e("ol",null,[e("li",null,[n[26]||(n[26]=e("p",null,"Ctags",-1)),e("p",null,[n[24]||(n[24]=s("下载地址：")),e("a",m,[n[23]||(n[23]=s("https://github.com/universal-ctags/ctags-win32/tags")),i(l)]),n[25]||(n[25]=s(" 选择不带日期的版本号点进去，一般选择x64版本安装。"))]),n[27]||(n[27]=e("p",null,[e("img",{src:"http://imagebed.krins.cloud/api/image/4T02084Z.png",alt:"Ctags下载"})],-1)),n[28]||(n[28]=e("p",null,[s("下载完后解压，尤其注意路径不能有中文和空格。之后把"),e("code",null,"Ctags.exe"),s("，这个文件所在路径复制，按照上文提到的方法添加进环境变量里。")],-1)),n[29]||(n[29]=e("p",null,[s("可以在命令行输入"),e("code",null,"Ctags --version"),s("确认是否成功添加。")],-1))]),e("li",null,[n[32]||(n[32]=e("p",null,"iVerilog",-1)),e("p",null,[n[31]||(n[31]=s("下载地址：")),e("a",g,[n[30]||(n[30]=s("http://bleyer.org/icarus/")),i(l)])]),n[33]||(n[33]=a("<p>安装iVerilog注意事项：</p><ol><li><p>安装路径不能有空格和中文，不然不能正常工作。</p></li><li><p>安装iVerilog时选择把GtkWave一起安装。</p></li><li><p>安装时勾选<code>Add to PATH</code>,不然要自己手动添加路径到环境变量。</p></li><li><p>在命令行输入<code>iverilog</code>确认是否正确安装。</p></li></ol>",2))])]),n[57]||(n[57]=a('<p>Ctags和iVerilog安装完我们就要配置插件<code>Verilog-HDL/SystemVerilog/Bluespec SystemVerilog</code>了。</p><p><code>Ctrl+Shift+X</code>呼出拓展菜单，找到<code>Verilog-HDL/SystemVerilog/Bluespec SystemVerilog</code>,点击右下角的齿轮，选择拓展设置。</p><p><img src="http://imagebed.krins.cloud/api/image/40X0220V.png" alt="找到Verilog-HDL/SystemVerilog/Bluespec SystemVerilog拓展设置"></p><p>具体设置如下：</p><ol><li><p>在<code>Ctags：path</code>这一栏填写<code>Ctags.exe路径</code>或只写<code>Ctags</code>即可。</p><p><img src="http://imagebed.krins.cloud/api/image/NP4FP2DT.png" alt="Ctags路径设置"></p></li><li><p>在<code>linting&gt;Iverilog:Arguments</code>中填写<code>-i</code>,避免Iverilog报<code>Unknown Type</code>类型错误。</p><p><img src="http://imagebed.krins.cloud/api/image/V600V2X2.png" alt="Iverilog参数修正"></p></li><li><p><code>Linting:linter</code>选择<code>iverilog</code></p></li></ol><p>配置完之后重启VSCode，打开一个.v文件就可以跳转定义和自动纠错啦。</p><p>将鼠标放在一个变量名上可以看到它的定义，按住<code>Ctrl</code>再点击变量可以直接跳转到定义。</p><p><img src="http://imagebed.krins.cloud/api/image/B0BV24B2.png#pic_center" alt="跳转定义"></p><p>自动纠错也能正常运行，语法错误部分有红色波浪线标注。但要注意iverilog检查的是已保存的文件，每次修改完保存一下才能看到正确的检查结果。按<code>Ctrl+Shift+M</code>，可以在VSCode下方看到当前文件所有问题，单击问题即可跳转到问题所在行。</p><p><img src="http://imagebed.krins.cloud/api/image/XN6JBR8X.png" alt="错误检查"></p><h3 id="三、将vivado文本编辑器修改为vscode😋" tabindex="-1"><a class="header-anchor" href="#三、将vivado文本编辑器修改为vscode😋"><span>三、将vivado文本编辑器修改为VSCode😋</span></a></h3><p>打开vivado，点击左上角的<code>Tools</code>，再点击<code>Settings...</code></p><p><img src="http://imagebed.krins.cloud/api/image/4FR8NF40.png" alt="打开vivado_Settings"></p><p>选择<code>Text Editor</code>，下拉框选择<code>Customer Editor...</code>，点击旁边的三个点，在文本框中输入<code>Code.exe的绝对路径 [file name]:[line number]</code></p><p><img src="http://imagebed.krins.cloud/api/image/0TZ8Z004.png" alt="调整编辑器到VSCode"></p><p>注意不要直接在vivado里选中文件打开，会导致vivado所有相关文件都用vscode打开，会特别卡，出现这种情况就用任务管理器终止掉VSCode这个进程，然后手动打开VSCode，再通过vivado打开要查看和修改的文件就可以了。也就是，不能不打开VSCode，就直接用vivado打开文件。</p><h3 id="四、使用iverilog-gtkwave进行简单的波形仿真🤗" tabindex="-1"><a class="header-anchor" href="#四、使用iverilog-gtkwave进行简单的波形仿真🤗"><span>四、使用Iverilog+GtkWave进行简单的波形仿真🤗</span></a></h3>',17)),e("ol",null,[n[40]||(n[40]=e("li",null,[e("p",null,"Icarus Verilog编译器介绍"),e("ol",null,[e("li",null,"iverilog：用于编译verilog和vhdl文件，进行语法检查，生成可执行文件；"),e("li",null,"vvp：根据可执行文件，生成仿真波形文件；"),e("li",null,"gtkwave：用于打开仿真波形文件，图形化显示波形。")])],-1)),e("li",null,[n[39]||(n[39]=a(`<p>iverilog常用参数介绍</p><p>在终端输入iverilog回车，可以看到常用参数使用方法的简单介绍：</p><div class="language-LUA line-numbers-mode" data-highlighter="prismjs" data-ext="LUA" data-title="LUA"><pre><code><span class="line">Usage: iverilog [-EiSuvV] [-B base] [-c cmdfile|-f cmdfile]</span>
<span class="line">               [-g1995|-g2001|-g2005|-g2005-sv|-g2009|-g2012] [-g&lt;feature&gt;]</span>
<span class="line">               [-D macro[=defn]] [-I includedir]</span>
<span class="line">               [-M [mode=]depfile] [-m module]</span>
<span class="line">               [-N file] [-o filename] [-p flag=value]</span>
<span class="line">               [-s topmodule] [-t target] [-T min|typ|max]</span>
<span class="line">               [-W class] [-y dir] [-Y suf] [-l file] source_file(s)</span>
<span class="line"></span>
<span class="line">See the man page for details.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),e("ol",null,[n[37]||(n[37]=e("li",null,[e("p",null,[s("-o 用于指定生成文件的名称。如："),e("code",null,"iverilog -o test test.v"),s("。如果不指定，默认生成文件名为a.out。")])],-1)),e("li",null,[n[36]||(n[36]=a(`<p>-y 用于指定包含文件夹，如果top.v中调用了其他的的.v模块，top.v直接编译会提示。</p><p>比如直接编译led_demo_tb.v，会报以下错误：</p><div class="language-LUA line-numbers-mode" data-highlighter="prismjs" data-ext="LUA" data-title="LUA"><pre><code><span class="line">led_demo_tb.v:38: error: Unknown module type: led_demo</span>
<span class="line">2 error(s) during elaboration.</span>
<span class="line">*** These modules were missing:</span>
<span class="line">      led_demo referenced 1 times.</span>
<span class="line">***</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找不到调用的模块，那么就需要指定调用模块所在文件夹的路径，支持相对路径和绝对路径。</p><p>如：<code>iverilog -y D:/test/demo led_demo_tb.v</code></p><p>如果是同一目录下：<code>iverilog -y ./ led_demo_tb.v</code></p>`,6)),e("p",null,[n[35]||(n[35]=s("另外，iverilog还支持Xilinx、Altera、Lattice等FPGA厂商的仿真库，需要在编译时通过-y参数指定库文件的路径，详细的使用方法可以查看官方用户指南：")),e("a",b,[n[34]||(n[34]=s("https://iverilog.fandom.com/wiki/User_Guide")),i(l)])])]),n[38]||(n[38]=e("li",null,[e("p",null,"-tvhdl"),e("p",null,[s("iverilog还支持把verilog文件转换为VHDL文件，如"),e("code",null,"iverilog -tvhdl -o out_file.vhd in_file.v")])],-1))])]),n[41]||(n[41]=a(`<li><p>操作流程示例</p><ol><li><p>首先创建要编译的文件</p><p><code>led_demo.v</code> 该模块每10个时钟令LED翻转一次</p><div class="language-Verilog line-numbers-mode" data-highlighter="prismjs" data-ext="Verilog" data-title="Verilog"><pre><code><span class="line">module led_demo(</span>
<span class="line">   input clk,</span>
<span class="line">   input rst_n,</span>
<span class="line"></span>
<span class="line">   output reg led</span>
<span class="line">);</span>
<span class="line"></span>
<span class="line">   reg [7:0] cnt;</span>
<span class="line"></span>
<span class="line">   always @ (posedge clk)</span>
<span class="line">   begin</span>
<span class="line">      if(!rst_n)</span>
<span class="line">         cnt &lt;= 0;</span>
<span class="line">      else if(cnt &gt;= 10)</span>
<span class="line">         cnt &lt;= 0;</span>
<span class="line">      else </span>
<span class="line">         cnt &lt;= cnt + 1;</span>
<span class="line">   end</span>
<span class="line"></span>
<span class="line">   always @ (posedge clk)</span>
<span class="line">   begin</span>
<span class="line">      if(!rst_n)</span>
<span class="line">         led &lt;= 0;</span>
<span class="line">      else if(cnt == 10)</span>
<span class="line">         led &lt;= !led;</span>
<span class="line">   end</span>
<span class="line"></span>
<span class="line">endmodule </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>led_demo_tb.v</code> 仿真激励文件</p><div class="language-verilog line-numbers-mode" data-highlighter="prismjs" data-ext="verilog" data-title="verilog"><pre><code><span class="line"><span class="token constant">\`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">100</span>ps</span>
<span class="line"><span class="token keyword">module</span> led_demo_tb<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">parameter</span> SYSCLK_PERIOD <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">reg</span> SYSCLK<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">reg</span> NSYSRESET<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   led_demo led_demo_ut0 <span class="token punctuation">(</span></span>
<span class="line">      <span class="token comment">// Inputs</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">rst_n</span><span class="token punctuation">(</span>NSYSRESET<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>SYSCLK<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// Outputs</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">led</span><span class="token punctuation">(</span> led<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">initial</span></span>
<span class="line">   <span class="token keyword">begin</span></span>
<span class="line">      SYSCLK <span class="token operator">=</span> <span class="token number">1&#39;b0</span><span class="token punctuation">;</span></span>
<span class="line">      NSYSRESET <span class="token operator">=</span> <span class="token number">1&#39;b0</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">initial</span></span>
<span class="line">   <span class="token keyword">begin</span></span>
<span class="line">      #<span class="token punctuation">(</span>SYSCLK_PERIOD <span class="token operator">*</span> <span class="token number">10</span> <span class="token punctuation">)</span></span>
<span class="line">         NSYSRESET <span class="token operator">=</span> <span class="token number">1&#39;b1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token number">#1000</span></span>
<span class="line">         <span class="token kernel-function property">$stop</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">   <span class="token important">always @</span><span class="token punctuation">(</span>SYSCLK<span class="token punctuation">)</span></span>
<span class="line">      #<span class="token punctuation">(</span>SYSCLK_PERIOD <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span> SYSCLK <span class="token operator">&lt;=</span> <span class="token operator">!</span>SYSCLK<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token comment">/*iverilog */</span></span>
<span class="line">   <span class="token keyword">initial</span></span>
<span class="line">   <span class="token keyword">begin</span>            </span>
<span class="line">      <span class="token kernel-function property">$dumpfile</span><span class="token punctuation">(</span><span class="token string">&quot;wave.vcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//生成的vcd文件名称,仿真信息将记录到此文件</span></span>
<span class="line">      <span class="token kernel-function property">$dumpvars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> led_demo_tb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//指定层次数为0，则led_demo_tb模块及其下面各层次的所有信号将被记录</span></span>
<span class="line">   <span class="token keyword">end</span></span>
<span class="line">   <span class="token comment">/*iverilog */</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">endmodule</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意仿真文件中的这一段是必须的，否则不能生成.vcd文件。</p><div class="language-verilog line-numbers-mode" data-highlighter="prismjs" data-ext="verilog" data-title="verilog"><pre><code><span class="line"><span class="token keyword">initial</span></span>
<span class="line">      <span class="token keyword">begin</span>            </span>
<span class="line">         <span class="token kernel-function property">$dumpfile</span><span class="token punctuation">(</span><span class="token string">&quot;wave.vcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//生成的vcd文件名称,仿真信息将记录到此文件</span></span>
<span class="line">         <span class="token kernel-function property">$dumpvars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> led_demo_tb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//指定层次数为0，则led_demo_tb模块及其下面各层次的所有信号将被记录</span></span>
<span class="line">      <span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编译</p><p>将命令行cd到上述文件所在目录。</p><p>通过<code>iverilog -o wave led_demo_tb.v led_demo.v</code>命令，对源文件和仿真文件，进行语法规则检查和编译。</p><p>由于本示例比较简单，只有1个文件，如果调用了多个.v的模块，可以通过前面介绍的<code>-y</code>参数指定源文件的路径，否则编译报错。</p><p>如果源文件都在同同一个目录，可以直接通过./绝对路径的方式来指定。 例如，led_demo_tb.v中调用了led_demo.v模块，就可以直接使用<code>iverilog -o wave -y ./ led_demo.v led_demo_tb.v</code>来进行编译。</p><p>如果编译成功，会在当前目录下生成名称为<code>wave.out</code>的文件。</p></li><li><p>生成波形文件</p><p>使用<code>vvp -n wave -lxt2</code>命令生成vcd波形文件，运行之后，会在当前目录下生成.vcd文件。</p><p>其中<code>-n</code>命令是为了结束仿真，退出程序。如果忘记加了的话，在命令行输入<code>finish</code>，也可退出仿真，进行下一步。</p><p><code>wave</code>是执行我们之前编译之后生成的<code>wave.out</code>文件。</p><p><code>-lxt2</code>是以lxt2形式生成<code>.vcd</code>文件，可以不加。</p></li><li><p>打开波形文件</p><p>使用命令<code>gtkwave wave.vcd</code>，即可在图形化界面中查看仿真的波形图。</p><p>刚打开一般什么波形都没有。我们先点击左上角窗口的模块名，再双击例化的模块，就可以在左下角的窗口看到信号，双击要观察波形的信号，就可以在右边窗口看到波形。</p><p>点击上方的放大镜可以使波形缩放到一整个窗口刚好看完，所以可以拖动该程序右下角以及合理挤压波形窗口左侧区域把窗口调大后，再点击该图标，波形可以看的更清楚一些。</p><p><img src="http://imagebed.krins.cloud/api/image/HF2J00LJ.png" alt="波形图"></p></li></ol></li><li><p>Verilog转换为VHDL</p><p>虽然VHDL和Verilog都属于硬件描述语言（HDL），但是二者的语法特性却不一样。Icarus Verilog 还有一个小功能就是支持把使用Verilog语言编写的.v文件转换为VHDL语言的.vhd文件。</p><p>如把<code>led_demo.v</code>文件转换为VHDL文件<code>led_demo.vhd</code>，使用命令<code>iverilog -tvhdl -o led_demo.vhd led_demo.v</code>。</p><p>因为Verilog和VHDL是不同的语法规则，不能直接使用Verilog的标准来检查VHDL文件的语法。需要添加<code>-g2012</code>参数来对VHDL文件进行编译，如<code>iverilog -g2012 led_demo.vhd</code>，和Verilog一样，同样也支持Testbech文件的编译和仿真，当然需要编写对应的VHDL Testbench文件。</p></li><li><p>小tips</p><p>结合自动生成testbench插件和用户代码，我们可以在写完<code>.v</code>文件后快速写完激励文件。</p><p>用户代码配置如下：</p><ol><li><p>在VSCode中选择<code>文件-首选项-配置用户代码片段</code></p><p><img src="http://imagebed.krins.cloud/api/image/LVZ8Z2J4.png" alt="配置用户代码片段"></p></li><li><p>在弹出的文本框中输入<code>verilog</code>，配置<code>.v</code>文件专用代码片段。</p><p><img src="http://imagebed.krins.cloud/api/image/8ZLZJ82F.png" alt="配置verilog专用片段"></p></li><li><p>在最外面的大括号内输入以下代码：</p><div class="language-verilog line-numbers-mode" data-highlighter="prismjs" data-ext="verilog" data-title="verilog"><pre><code><span class="line"><span class="token string">&quot;波形文件&quot;</span><span class="token punctuation">:</span><span class="token operator">{</span></span>
<span class="line">   <span class="token string">&quot;prefix&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;vcd&quot;</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token string">&quot;body&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">&quot;/*生成仿真所需的vcd文件*/&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;initial begin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;    $$dumpfile(\\&quot;wave.vcd\\&quot;); //指定生成的vcd文件名称为wave.vcd,仿真信息将记录到此文件&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;    $$dumpvars(0, tb_$1 ); //指定层次数为0,则tb模块及其下面各层次的所有信号将被记录&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token string">&quot;description&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;生成波形文件&quot;</span></span>
<span class="line"><span class="token operator">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存。</p></li></ol><p>之后在<code>.v</code>文件中输入<code>vcd</code>就可选择替换成此代码块。</p><p><img src="http://imagebed.krins.cloud/api/image/H44RRR6R.png" alt="vcd"></p></li>`,3))]),n[58]||(n[58]=e("h3",{id:"五、使用yosys进行综合🤨",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#五、使用yosys进行综合🤨"},[e("span",null,"五、使用yosys进行综合🤨")])],-1)),n[59]||(n[59]=e("p",null,"yosys为一套开源的针对verilog的rtl综合框架，安装完这个框架后可以实现通过VSCode综合出RTL电路。",-1)),e("ol",null,[e("li",null,[n[48]||(n[48]=a("<p>安装yosys</p><p>因为没有人将<code>yosys</code>打包成<code>exe</code>，所以下载完源码后要自己编译，我试了几个包都没有成功，郁闷😔之际找到一种方法——使用msys2模拟linux环境下载<code>yosys</code>，方便、高效。<code>msys2</code>是基于<code>cygwin</code>和<code>mingw</code>的一套开发环境，使用msys2可以在windows上获得和linux几乎一致的开发环境。</p>",2)),e("ol",null,[e("li",null,[n[45]||(n[45]=e("p",null,"下载msys2",-1)),e("p",null,[n[43]||(n[43]=s("从")),e("a",k,[n[42]||(n[42]=s("msys2官网")),i(l)]),n[44]||(n[44]=s("下载最新的安装文件，双击并连续点击下一步安装即可，记得自己的安装路径就好。"))]),n[46]||(n[46]=e("p",null,[e("img",{src:"http://imagebed.krins.cloud/api/image/8N6JN6ND.png",alt:"下载msys2"})],-1))]),n[47]||(n[47]=a('<li><p>下载工具包</p><p>打开<code>msys2.exe</code>,输入<code>#pacman -S mingw-w64-x86_64-eda</code>,再输入<code>23</code>选择下载<code>yosys</code>，之后按<code>Y</code>。依自身情况选择是否下载<code>nextpnr</code>、<code>icestorm</code>、<code>icesprog</code>等软件包进行安装。</p><p><img src="http://imagebed.krins.cloud/api/image/0622VZH2.png" alt="安装yosys"></p></li><li><p>将<code>yosys.exe</code>添加进环境变量</p><p>找到<code>yosys.exe</code>所在路径，一般是<code>.\\MSYS2\\mingw64\\bin</code>，<code>.\\</code>是之前安装<code>MSYS2</code>的路径。然后将此路径添加到环境变量即可。</p><p>之后重启电脑。亲测一定要重启电脑，不然一直找不到程序。</p><p>添加完后在<code>cmd</code>输入<code>yosys</code>测试是否成功。</p><p><img src="http://imagebed.krins.cloud/api/image/86H80T4B.png" alt="yosys测试"></p></li>',2))])]),n[49]||(n[49]=a('<li><p>用<code>yosys</code>综合</p><p>以之前<code>led_demo.v</code>为例。</p><ol><li><p>将VSCode的工作区设在<code>led_demo.v</code>所在文件夹。</p></li><li><p>在终端输入<code>yosys</code></p></li><li><p>输入<code>read -sv led_demo.v</code>，意思是以<code>sv标准</code>读取该verilog文件。</p></li><li><p>输入<code>hierarchy -top led_demo</code>，这一步设置顶层模块，后面输入的是模块名。</p></li><li><p>输入<code>write_rtlil</code>，将设计写入Yosys内部文件格式。</p></li><li><p>输入<code>proc; opt</code>，将RTL设计转为网络元素，并做一次优化。注意分号后面有个空格。</p></li><li><p>输入<code>show</code>，将在工作区生成<code>show.dot</code>文件，通过VSCode的插件<code>Graphviz Interactive Preview</code>，点击右上角的预览即可查看RTL连接。但有一说一，不是vivado那种门符号，不太容易看得懂。</p></li></ol><p><img src="http://imagebed.krins.cloud/api/image/2XTP8D8R.png" alt="RTL图型查看"></p></li>',1))]),n[60]||(n[60]=e("hr",null,null,-1)),n[61]||(n[61]=e("p",null,"至此，我们就完成了VSCode关于Verilog的所有配置，也尝试了直接用它实现简单工程级的应用。虽然配置起来有很多包需要下，但需要注意的地方我都说明了。实操起来应该会很快。希望看到这篇文章的人都能一遍就走完所有流程。🥳",-1)),n[62]||(n[62]=e("hr",null,null,-1)),n[63]||(n[63]=e("h3",{id:"六、参考资料😆",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#六、参考资料😆"},[e("span",null,"六、参考资料😆")])],-1)),e("ol",null,[e("li",null,[e("a",y,[n[50]||(n[50]=s("Vivado加上VsCode让你的生活更美好")),i(l)])]),e("li",null,[e("a",h,[n[51]||(n[51]=s("用VSCode编辑verilog代码、iverilog编译、自动例化、自动补全、自动格式化等常用插件")),i(l)])]),e("li",null,[e("a",V,[n[52]||(n[52]=s("全平台轻量开源verilog仿真工具iverilog+GTKWave使用教程")),i(l)])]),e("li",null,[e("a",S,[n[53]||(n[53]=s("Windows 安装FPGA开源工具链")),i(l)])]),e("li",null,[e("a",f,[n[54]||(n[54]=s("集成电路设计开源EDA软件yosys详解1：工具安装")),i(l)])])])])}const L=p(c,[["render",w]]),T=JSON.parse('{"path":"/blogs/Config/VSCode_Verilog.html","title":"VSCode编写Verilog的相关配置","lang":"en-US","frontmatter":{"title":"VSCode编写Verilog的相关配置","date":"2022-08-18T00:00:00.000Z","tags":["Verilog","VSCode"],"categories":["Config"]},"headers":[{"level":2,"title":"配置VSCode，愉快编写Verilog小工程","slug":"配置vscode-愉快编写verilog小工程","link":"#配置vscode-愉快编写verilog小工程","children":[{"level":3,"title":"零、写在开头🧐","slug":"零、写在开头🧐","link":"#零、写在开头🧐","children":[]},{"level":3,"title":"一、用VSCode写Verilog的原因🤣","slug":"一、用vscode写verilog的原因🤣","link":"#一、用vscode写verilog的原因🤣","children":[]},{"level":3,"title":"二、配置所需的VSCode插件😉","slug":"二、配置所需的vscode插件😉","link":"#二、配置所需的vscode插件😉","children":[]},{"level":3,"title":"三、将vivado文本编辑器修改为VSCode😋","slug":"三、将vivado文本编辑器修改为vscode😋","link":"#三、将vivado文本编辑器修改为vscode😋","children":[]},{"level":3,"title":"四、使用Iverilog+GtkWave进行简单的波形仿真🤗","slug":"四、使用iverilog-gtkwave进行简单的波形仿真🤗","link":"#四、使用iverilog-gtkwave进行简单的波形仿真🤗","children":[]},{"level":3,"title":"五、使用yosys进行综合🤨","slug":"五、使用yosys进行综合🤨","link":"#五、使用yosys进行综合🤨","children":[]},{"level":3,"title":"六、参考资料😆","slug":"六、参考资料😆","link":"#六、参考资料😆","children":[]}]}],"git":{"createdTime":1744420073000,"updatedTime":1744420073000,"contributors":[{"name":"NewLearner4396","email":"NewLearner4396@users.noreply.github.com","commits":1}]},"filePathRelative":"blogs/Config/VSCode_Verilog.md"}');export{L as comp,T as data};
